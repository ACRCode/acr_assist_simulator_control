{"version":3,"sources":["file-upload-loader.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,MAAA,EAAS,YAAA,EAAc,MAAA,eAAA,CAAA;AAC3C,OAAO,EAAE,WAAA,EAAY,MAAA,oCAAA,CAAA;AACrB,MAEC;IAFD;QAEG,sBAAiB,GAE8B,IAAI,YAAA,EAAyB,CAAG;QADhF,eAAU,GAEe,IAAI,UAAA,EAAW,CAAE;IAkD5C,CAAC;IAlDD;;;OAGG;IACH,cADG,CAAA,MAAA;QAEC,IAAI,CADC,QAAC,CAAQ,MAAC,CAAM,MAAC,CAAM,CAAC;IAE/B,CAAC;IACH;;;OAGG;IACH,QAHG,CAAA,UAAA;QAIC,IAAI,CAHC,QAAC,GAAU,UAAA,CAAW,KAAC,CAAK,CAAC,CAAC,CAAC;QAIpC,MAAM,gBAAgB,CAHhB,IAAA,GAAO,IAAA,CAAK;QAIlB,IAAI,CAHC,UAAC,CAAU,SAAC,GAAW,CAAA,CAAE;YAI5B,IAAI,CAHC,iBAAC,CAAiB,IAAC,CAAK,IAAI,WAAA,CAAY,IAAC,CAAI,QAAC,CAAQ,IAAC,EAAK,IAAA,CAAK,UAAC,CAAU,MAAC,CAAM,CAAC,CAAC;QAI5F,CAAC,CAHC;QAIF,IAAI,CAHC,UAAC,CAAU,UAAC,CAAU,IAAC,CAAI,QAAC,CAAQ,CAAC;IAI5C,CAAC;;AAFI,oCAAA,GAAoC;IAI3C,EAHE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAIvB,QAAQ,EAHE,wBAAA;gBAIV,QAAQ,EAHE;;;;;;;;;;;;;;GAiBT;gBACD,MAAM,EAHE,CAAA;;GAKP,CAHC;aAIH,EAHC,EAAG;CAIJ,CAHC;AAIF;;GAEG;AAJF,wCAAA,GAAA,MAAA,EAMA,CAAC;AAJK,wCAAA,GAAyD;IAMhE,mBAAmB,EALE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAMtC,CALC;AAQF;IACA,gBAAgB;IAChB,yBAAyB,CAAC,UAAU,CAAC;IACrC;;;OAGG;IACH,yBAAyB,CAAC,cAAc,CAAC;IACzC,gBAAgB;IAChB,yBAAyB,CAAC,cAAc,CAAC;IACzC,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,iBAAiB,CAAC;IACtD,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC/C,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC7C,CAAC","file":"file-upload-loader.component.js","sourceRoot":"","sourcesContent":["import { Component, Output ,  EventEmitter } from '@angular/core';\nimport { FileDetails } from '../share/models/file-details.model';\nexport class FileUploadLoaderComponent  {\n\n   onFileContentRead: EventEmitter<FileDetails> = new EventEmitter<FileDetails>();\n  fileReader: FileReader = new FileReader();\n  readFile: File;\n/**\n * @param {?} $event\n * @return {?}\n */\nchangeListener($event): void {\n    this.readThis($event.target);\n  }\n/**\n * @param {?} inputValue\n * @return {?}\n */\nreadThis(inputValue: any): void {\n    this.readFile = inputValue.files[0];\n    const /** @type {?} */ self = this;\n    this.fileReader.onloadend = (e) => {\n      self.onFileContentRead.emit( new FileDetails(self.readFile.name, this.fileReader.result));\n    };\n    this.fileReader.readAsText(this.readFile);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'acr-file-upload-loader',\n  template: `\n    <div class = \"row\">\n      <div class= \"col-sm-12\">\n          <div class=\"panel panel-default\">\n              <div class=\"panel-heading\">Select  the Template file</div>\n              <div class=\"panel-body\">\n                  <div class=\"row\">\n                        <div class=\"col-sm-6\"> Select the file to be uploaded</div>\n                        <div class=\"col-sm-6\"><input type=\"file\" accept=\".xml\" (change)=\"changeListener($event)\"></div>\n                  </div>\n              </div>\n            </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onFileContentRead': [{ type: Output },],\n};\n}\n\nfunction FileUploadLoaderComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nFileUploadLoaderComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFileUploadLoaderComponent.ctorParameters;\n/** @type {?} */\nFileUploadLoaderComponent.propDecorators;\n/** @type {?} */\nFileUploadLoaderComponent.prototype.onFileContentRead;\n/** @type {?} */\nFileUploadLoaderComponent.prototype.fileReader;\n/** @type {?} */\nFileUploadLoaderComponent.prototype.readFile;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}