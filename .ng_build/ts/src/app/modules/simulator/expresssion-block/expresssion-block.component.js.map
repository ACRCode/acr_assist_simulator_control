{"version":3,"sources":["expresssion-block.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAoB,KAAA,EAAQ,MAAA,EAAS,YAAA,EAAa,MAAA,eAAA,CAAA;AAC3D,OAAO,EAAE,cAAA,EAAe,MAAA,oCAAA,CAAA;AACxB,OAAO,EAAE,eAAA,EAAgB,MAAA,yCAAA,CAAA;AAEzB,MAEC;IAGD;;OAEG;IACH,YAAsB,cAAgB;QAAhB,mBAAA,GAAA,cAAA,CAAgB;QAPnC,eAAU,GAEW,EAAA,CAAG;QADxB,aAAQ,GAEoB,IAAI,eAAA,EAAgB,CAAE;QADlD,iBAAY,GAEkB,EAAA,CAAG;QADjC,wBAAmB,GAEgC,IAAI,YAAA,EAA2B,CAAG;IAIrF,CAAC;IACJ;;;OAGG;IACH,QAHG,CAAA,IAAA;QAIG,EAAE,CAAC,CAAC,IAHC,KAAQ,EAAA,CAAG,CAAC,CAAA;YAIb,MAAM,CAHC,KAAA,CAAM;QAIjB,CAAC;QACD,MAAM,CAHC,IAAA,CAAK,IAAC,CAAI,CAAC;IAItB,CAAC;IACH;;;;OAIG;IACH,QAPG,CAAA,IAAA,EAAA,sBAAA;QAQE,EAAE,CAAC,CAAC,IAPC,KAAQ,EAAA,CAAG,CAAC,CAAA;YAQZ,MAAM,CAPC,KAAA,CAAM;QAQjB,CAAC;QACD,MAAM,gBAAgB,CAPhB,MAAA,GAAS,IAAA,CAAK,IAAC,CAAI,CAAC;QAQ1B,EAAE,CAAC,CAAC,MAPC,IAAS,IAAA,CAAK,cAAC,CAAc,kBAAC,CAAkB,CAAC,CAAA;YAQlD,IAAI,CAPC,mBAAC,CAAmB,IAAC,CAAI,IAAC,CAAI,QAAC,CAAQ,uBAAC,CAAuB,CAAC;QAQzE,CAAC;QACD,MAAM,CAPC,MAAA,CAAO;IAQlB,CAAC;;AALI,oCAAA,GAAoC;IAQ3C,EAPE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAQvB,QAAQ,EAPE,uBAAA;gBAQV,QAAQ,EAPE;;;;;;;;;;;;;;;;;;;;;;;;;GAgCT;gBACD,MAAM,EAPE,CAAA;;GASP,CAPC;aAQH,EAPC,EAAG;CAQJ,CAPC;AAQF;;GAEG;AARF,wCAAA,GAAA,MAAA;IAUD,EAAC,IAAI,EAAE,cAAc,GAAG;CACvB,CAAC;AARK,wCAAA,GAAyD;IAUhE,YAAY,EATE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAU/B,UAAU,EATE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAU7B,cAAc,EATE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAUjC,qBAAqB,EATE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAUxC,CATC;AAYF;IACA,gBAAgB;IAChB,yBAAyB,CAAC,UAAU,CAAC;IACrC;;;OAGG;IACH,yBAAyB,CAAC,cAAc,CAAC;IACzC,gBAAgB;IAChB,yBAAyB,CAAC,cAAc,CAAC;IACzC,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,UAAU,CAAC;IAC/C,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC7C,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,YAAY,CAAC;IACjD,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,mBAAmB,CAAC;IACxD,gBAAgB;IAChB,yBAAyB,CAAC,SAAS,CAAC,cAAc,CAAC;AACnD,CAAC","file":"expresssion-block.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit , Input , Output , EventEmitter } from '@angular/core';\nimport { GlobalsService } from '../shared/services/globals.service';\nimport { ExpressionBlock } from '../shared/models/expression-block.model';\nimport { DataElement } from '../shared/models/data-element.model';\nexport class ExpresssionBlockComponent   {\n   FormValues: Object = {};\n   ExpBlock: ExpressionBlock = new ExpressionBlock();\n   DataElements: DataElement[] = [];\n   onExpressionChanged: EventEmitter<DataElement[]> = new EventEmitter<DataElement[]>();\n/**\n * @param {?} globalsService\n */\nconstructor(private globalsService: GlobalsService) {\n\n   }\n/**\n * @param {?} cond\n * @return {?}\n */\nvalidate(cond) {\n      if (cond === '') {\n          return false;\n      }\n      return eval(cond);\n  }\n/**\n * @param {?} cond\n * @param {?} notRelevantDataElments\n * @return {?}\n */\nevaluate(cond, notRelevantDataElments) {\n     if (cond === '') {\n          return false;\n      }\n      const /** @type {?} */ result = eval(cond);\n      if (result && this.globalsService.evaluateExpessions) {\n          this.onExpressionChanged.emit(this.ExpBlock.NotRelavantDataElements);\n      }\n      return result;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'acr-expresssion-block',\n  template: `\n\n\n        <ng-container *ngIf=\"!validate(ExpBlock.ValidationCondition)\">\n\n             <ng-container *ngIf=\"evaluate(ExpBlock.Condition, ExpBlock.NotRelavantDataElements)\">\n              <ng-container *ngIf=\"(ExpBlock.Result != undefined)\">\n              <acr-expression-result [DataElements]=\"DataElements\" [ExpBlock]=\"ExpBlock\" [Result]=\"ExpBlock.Result\" [FormValues]=\"FormValues\"></acr-expression-result>\n             </ng-container>\n\n            <ng-container *ngIf=\"ExpBlock.NestedBlocks.length > 0\">\n              <ng-container *ngFor=\"let NestedBlock of ExpBlock.NestedBlocks\">\n                    <acr-expresssion-block [ExpBlock]=\"NestedBlock\" [FormValues]=\"FormValues\" [DataElements]=\"DataElements\" ></acr-expresssion-block>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n\n          <ng-container *ngIf=\"ExpBlock.ElseBlocks.length > 0\">\n            <ng-container *ngIf=\"!evaluate(ExpBlock.Condition,ExpBlock.NotRelavantDataElements)\">\n              <ng-container *ngFor=\"let ElseBlock of ExpBlock.ElseBlocks\">\n               <acr-expresssion-block [ExpBlock]=\"ElseBlock\" [FormValues]=\"FormValues\" [DataElements]=\"DataElements\"> </acr-expresssion-block>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n  `,\n  styles: [`\n\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GlobalsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'FormValues': [{ type: Input },],\n'ExpBlock': [{ type: Input },],\n'DataElements': [{ type: Input },],\n'onExpressionChanged': [{ type: Output },],\n};\n}\n\nfunction ExpresssionBlockComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nExpresssionBlockComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExpresssionBlockComponent.ctorParameters;\n/** @type {?} */\nExpresssionBlockComponent.propDecorators;\n/** @type {?} */\nExpresssionBlockComponent.prototype.FormValues;\n/** @type {?} */\nExpresssionBlockComponent.prototype.ExpBlock;\n/** @type {?} */\nExpresssionBlockComponent.prototype.DataElements;\n/** @type {?} */\nExpresssionBlockComponent.prototype.onExpressionChanged;\n/** @type {?} */\nExpresssionBlockComponent.prototype.globalsService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}