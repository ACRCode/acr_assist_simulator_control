{"version":3,"sources":["image-map.component.ts"],"names":[],"mappings":"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","file":"image-map.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit , Input} from '@angular/core';\nimport { DataElement } from '../shared/models/data-element.model';\n\ndeclare var require: any;\nexport class ImageMapComponent  implements OnInit {\n\n\n      $ = require('jquery');\n       DataElement: DataElement;\n       DataElements: Object = {};\n       FormValues: Object = {};\n      imageExist = true;\n      SelectionValue = '';\n/**\n * @return {?}\n */\nngOnInit() {\n        const /** @type {?} */ request = new XMLHttpRequest();\n        request.open('HEAD',  this.DataElement.ImagePath, false);\n        request.send();\n        if (request.status === 200) {\n          this.imageExist = true;\n        } else {\n          this.imageExist = false;\n        }\n        this.displayValue('');\n      }\n/**\n * @param {?} mouseX\n * @param {?} mouseY\n * @param {?} Coordinates\n * @return {?}\n */\nisInRectangle(mouseX, mouseY, Coordinates) {\n          const /** @type {?} */ COArray = Coordinates.split(',');\n          if (COArray[0] < mouseX\n              && (COArray[0] + COArray[2]) > mouseX\n              && COArray[1] < mouseY\n              && (COArray[1] + COArray[3]) > mouseY) {\n              return true;\n          }\n          return false;\n      }\n/**\n * @param {?} mouseX\n * @param {?} mouseY\n * @param {?} Coordinates\n * @return {?}\n */\nisInCircle(mouseX, mouseY, Coordinates) {\n          const /** @type {?} */ COArray = Coordinates.split(',');\n          if (Math.sqrt(Math.pow((mouseX - COArray[0]), 2) + Math.pow((mouseY - COArray[1]), 2)) < COArray[2]) {\n            return true;\n          } else {\n              return false;\n          }\n      }\n/**\n * @param {?} x\n * @param {?} y\n * @param {?} Coordinates\n * @return {?}\n */\nisInPolygon(x, y, Coordinates) {\n          const /** @type {?} */ COArray = Coordinates.split(',');\n          const /** @type {?} */ vs = [];\n          for (let /** @type {?} */ i = 0; i < COArray.length; i++) {\n              const /** @type {?} */ point = [];\n              point.push(COArray[i]);\n              point.push(COArray[i + 1]);\n              i += 1;\n              vs.push(point);\n          }\n          let /** @type {?} */ inside = false;\n          for (let /** @type {?} */ i = 0, /** @type {?} */ j = vs.length - 1; i < vs.length; j = i++) {\n              const /** @type {?} */ xi = vs[i][0], /** @type {?} */ yi = vs[i][1];\n              const /** @type {?} */ xj = vs[j][0], /** @type {?} */ yj = vs[j][1];\n              const /** @type {?} */ intersect = ((yi > y) !== (yj > y))\n                  && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n              if (intersect) {\n                inside = !inside;\n              }\n          }\n          return inside;\n      }\n/**\n * @param {?} e\n * @param {?} dataElement\n * @return {?}\n */\nimageClick(e, dataElement) {\n            const /** @type {?} */ O_height = dataElement.ImageProp.height;\n            const /** @type {?} */ O_width = dataElement.ImageProp.width;\n            const /** @type {?} */ $elem = this.$(e.target);\n\n            const /** @type {?} */ N_height = $elem.height();\n            const /** @type {?} */ N_width = $elem.width();\n\n\n            const /** @type {?} */ offset = $elem.offset();\n\n            const /** @type {?} */ offset_t = offset.top - this.$(window).scrollTop();\n            const /** @type {?} */ offset_l = offset.left - this.$(window).scrollLeft();\n\n            const /** @type {?} */ x = e.clientX - offset_l;\n            const /** @type {?} */ y = e.clientY - offset_t;\n            for (const /** @type {?} */ opt of dataElement.ImageOptions) {\n                if (opt.Shape === 'rect') {\n                    if (this.isInRectangle(x, y, opt.Coordinates)) {\n                        this.FormValues[dataElement.ID] = opt.Value;\n                        break;\n                    }\n                } else if (opt.Shape === 'circle') {\n                    if (this.isInCircle(x, y, opt.Coordinates)) {\n                        this.FormValues[dataElement.ID] = opt.Value;\n                        break;\n                    }\n                }  else if (opt.Shape === 'poly') {\n                    if (this.isInPolygon(x, y, opt.Coordinates)) {\n                        this.FormValues[dataElement.ID] = opt.Value;\n                        break;\n                    }\n                }\n\n            }\n\n        }\n/**\n * @param {?} val\n * @return {?}\n */\nsetValue(val) {\n\n            this.FormValues[this.DataElement.ID] = val;\n        }\n/**\n * @param {?} val\n * @return {?}\n */\ndisplayValue(val) {\n            if (val === '') {\n                this.SelectionValue = 'Image Map Diagram';\n            } else {\n                this.SelectionValue = 'Selected Value : ' + val;\n            }\n        }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'acr-image-map',\n  template: `\n    <ng-container *ngIf=\"DataElement.ImagePath != undefined\">\n\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-center\">\n          OR\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-left\">\n          Select value from image:-\n            <button type=\"button\" class=\"btn btn-default\" data-toggle=\"modal\" attr.data-target=\"#{{'imgMap_Modal_'+DataElement.ID}}\">\n            <span class=\"glyphicon glyphicon-picture\" aria-hidden=\"true\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Image Map\"></span>\n          </button>\n        </div>\n      </div>\n\n      <ng-container *ngIf=\"DataElement.ImagePath != undefined\">\n        <div class=\"modal fade img-modal\" tabindex=\"-1\" role=\"dialog\" attr.id=\"{{'imgMap_Modal_'+DataElement.ID}}\" aria-labelledby=\"mySmallModalLabel\">\n          <div class=\"modal-dialog modal-lg\" role=\"document\" [ngStyle]=\"{'width':DataElement.ImagePath.width + 30}\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h4 class=\"modal-title\">\n                  {{SelectionValue}}\n                </h4>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                  <span aria-hidden=\"true\">×</span>\n                </button>\n              </div>\n              <div class=\"modal-body\">\n                <div class=\"row\">\n                  <div class=\"col-md-12\">\n                    <ng-container *ngIf=\"imageExist == true\">\n                      <img class=\"ImgOption danger\" alt=\"No Image Available!!!\" data-dismiss=\"modal\" attr.id=\"{{'imgMap_Img_'+DataElement.ID}}\"\n                        (click)=\"imageClick($event,DataElement);\" attr.data-elementID=\"{{DataElement.ID}}\" attr.usemap=\"#{{'imgMap_'+DataElement.ID}}\"\n                        src=\"{{DataElement.ImagePath}}\">\n                      <map name=\"{{'imgMap_'+DataElement.ID}}\">\n                        <ng-container *ngFor=\"let imgOpt of DataElement.ImageOptions\">\n                          <area attr.shape=\"{{imgOpt.Shape}}\" attr.imgID=\"{{'imgMap_Img_'+DataElement.ID}}\" attr.coords=\"{{imgOpt.Coordinates}}\" attr.alt=\"{{imgOpt.Value}}\"\n                            onmouseover='myHover(this);' onmouseout='myLeave();' (mouseover)='displayValue(imgOpt.Value);' (mouseout)='displayValue(\"\");'\n                            (click)=\"setValue(imgOpt.Value);\" data-dismiss=\"modal\">\n                        </ng-container>\n                      </map>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"imageExist == false\">\n                      <div class=\"\">\n                        No Image Map Available...\n                      </div>\n                    </ng-container>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n  `,\n  styles: [`\n\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'DataElement': [{ type: Input },],\n'DataElements': [{ type: Input },],\n'FormValues': [{ type: Input },],\n};\n}\n\nfunction ImageMapComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nImageMapComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nImageMapComponent.ctorParameters;\n/** @type {?} */\nImageMapComponent.propDecorators;\n/** @type {?} */\nImageMapComponent.prototype.$;\n/** @type {?} */\nImageMapComponent.prototype.DataElement;\n/** @type {?} */\nImageMapComponent.prototype.DataElements;\n/** @type {?} */\nImageMapComponent.prototype.FormValues;\n/** @type {?} */\nImageMapComponent.prototype.imageExist;\n/** @type {?} */\nImageMapComponent.prototype.SelectionValue;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}