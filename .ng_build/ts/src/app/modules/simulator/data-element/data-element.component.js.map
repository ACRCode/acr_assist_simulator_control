{"version":3,"sources":["data-element.component.ts"],"names":[],"mappings":"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","file":"data-element.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, Input, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { DataElement } from '../shared/models/data-element.model';\nimport { StringUtilityService } from '../shared/services/string-utility.service';\nexport class DataElementComponent  {\n   DataElements: DataElement[] = [];\n   FormValues: Object = {};\n   ValidationBlocks = [];\n  formInitialized = true;\n  defaultOption = 'Select';\n  console = console;\n/**\n * @param {?} stringUtilityService\n */\nconstructor(private stringUtilityService: StringUtilityService) {}\n/**\n * @return {?}\n */\nitemSelected() {\n  }\n/**\n * @param {?} cond\n * @return {?}\n */\nevaluate(cond) {\n     return eval(cond);\n  }\n/**\n * @param {?} DataElementID\n * @param {?} choiceValue\n * @param {?} event\n * @return {?}\n */\nupdateMultichoice(DataElementID, choiceValue, event) {\n    let /** @type {?} */ previousValue = this.FormValues[DataElementID];\n    if (event.currentTarget.checked) {\n      if (previousValue === undefined) {\n        previousValue = [];\n      }\n      previousValue.push(choiceValue);\n    } else {\n      const /** @type {?} */ index = previousValue.indexOf(choiceValue);\n      if (index > -1) {\n        previousValue.splice(index, 1);\n      }\n    }\n    this.FormValues[DataElementID] = previousValue;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'acr-data-element',\n  template: `\n    <canvas id='Can-ImgMap'>\n\n    </canvas>\n    <ng-container *ngFor=\"let DataElement of DataElements\">\n\n\n\n      <ng-container *ngIf=\"(DataElement.ElementType == 'ComputedElement')\">\n        <acr-computed-element [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-computed-element>\n      </ng-container>\n\n\n      <ng-container *ngIf=\"(DataElement.ElementType == 'ChoiceDataElement' || DataElement.ElementType == 'NumericDataElement' || DataElement.ElementType == 'IntegerDataElement' || DataElement.ElementType == 'MultiChoiceDataElement') \">\n        <ng-container *ngIf=\"DataElement.Visible\">\n          <div class=\"form-group \" [class.Visible]=\"DataElement.Visible\">\n            <div class=\"col-sm-5 text-left content-padding\">\n              <label class=\"control-label DEElement\" id=\"{{DataElement.ID}}\">\n                {{DataElement.Label}}\n              </label>\n              <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.Hint) \">\n                <a>\n                  <span class=\"glyphicon glyphicon-info-sign\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"{{DataElement.Hint}}\"></span>\n                </a>\n              </ng-container>\n              <ng-container *ngIf=\"DataElement.Diagrams != undefined \">\n                <acr-hint-diagram [DataElement]=\"DataElement\"></acr-hint-diagram>\n              </ng-container>\n              <ng-container *ngIf=\"ValidationBlocks.length > 0\">\n                <ng-container *ngFor=\"let Block of ValidationBlocks\">\n                  <ng-container *ngIf=\"(DataElement.Visible)\">\n                    <ng-container *ngIf=\"evaluate(Block.Condition)\">\n                      <ng-container *ngIf=\"Block.DataElementID == DataElement.ID\">\n                        <ng-container *ngIf=\"Block.Message =='Minimum value required'\">\n                          <span class=\"required-field\">Minimum Value: {{Block.Minimum}}</span>\n                        </ng-container>\n                        <ng-container *ngIf=\"Block.Message != 'Minimum value required'\">\n                          <span class=\"required-field\">* Required field !!!</span>\n                        </ng-container>\n                      </ng-container>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n              </ng-container>\n            </div>\n\n            <div class=\"col-sm-7 text-left content-padding\">\n              <div class=\"input-group \">\n                <!--Choice DataElements-->\n                <ng-container *ngIf=\"DataElement.ElementType == 'ChoiceDataElement' \">\n                  <div class=\"row\">\n                    <ng-container *ngIf=\"DataElement.ChoiceOptions.length == 2\">\n                      <!-- Full width for radio if Imagepath exist -->\n                      <ng-container *ngIf=\"DataElement.ImagePath != undefined\">\n                        <div id=\"radio-inline\">\n                          <ng-container *ngFor=\"let choice of DataElement.ChoiceOptions\">\n                              <div class=\"row\">\n                                  <div class=\"col-sm-12\">\n                            <label class=\"rad DEValues\">\n                              <input type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                checked style=\"display:none;\">\n                              <div  (click)=\"itemSelected()\">\n                                <input class=\"hideInput\" type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                  checked>\n                                <span>{{choice.Label}}</span>\n\n                              </div>\n                              <div class=\"clear\"></div>\n                            </label>\n                            </div></div>\n                          </ng-container>\n                        </div>\n                      </ng-container>\n                      <!-- Full width for radio if Imagepath does not exist -->\n                      <ng-container *ngIf=\"DataElement.ImagePath == undefined\">\n                        <div id=\"radio-inline\">\n                          <ng-container *ngFor=\"let choice of DataElement.ChoiceOptions\">\n                            <div class=\"row\">\n                                <div class=\"col-sm-12\">\n                                    <label class=\"rad DEValues\">\n                                        <input type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                          checked style=\"display:none;\">\n                                        <div  (click)=\"itemSelected()\" >\n                                          <input class=\"hideInput\" type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                            checked>\n                                          <span>{{choice.Label}}</span>\n                                        </div>\n\n                                      </label>\n                                </div>\n                            </div>\n\n                          </ng-container>\n                        </div>\n                      </ng-container>\n                    </ng-container>\n                    <ng-container *ngIf=\"DataElement.ChoiceOptions.length != 2\">\n                      <!-- Dropdown will be created if choice options have more than 5 choices-->\n                      <ng-container *ngIf=\"DataElement.ChoiceOptions.length > 5\">\n                        <select id=\"{{DataElement.ID}}\" [(ngModel)]=\"FormValues[DataElement.ID]\" (ngModelChange)=\"itemSelected()\">\n                          <option [value]=\"Select\">--Select--</option>\n                          <option *ngFor=\"let choice of DataElement.ChoiceOptions\" [value]=\"choice.Value\">{{choice.Label}}</option>\n                        </select>\n                      </ng-container>\n                      <!-- Radio button will be created if choice options have are <=5 choices-->\n                      <ng-container *ngIf=\"DataElement.ChoiceOptions.length <= 5\">\n                        <ng-container *ngFor=\"let choice of DataElement.ChoiceOptions\">\n                          <div id=\"radio-inline\">\n                              <div class=\"row\">\n                                  <div class=\"col-sm-12\">\n                                    <label class=\"rad DEValues\">\n                                      <input type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                        checked style=\"display:none;\">\n                                      <div  (click)=\"itemSelected()\">\n                                        <input class=\"hideInput\" type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                          checked>\n                                        <span>{{choice.Label}}</span>\n\n                                      </div>\n\n                            </label>\n                          </div> </div>\n                          </div>\n                        </ng-container>\n                      </ng-container>\n                    </ng-container>\n                  </div>\n                  <!-- imagemap will be displyed here -->\n                  <ng-container *ngIf=\"DataElement.ImagePath != undefined\">\n                    <div class=\"row\">\n                      <acr-image-map [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-image-map>\n                    </div>\n                  </ng-container>\n\n\n                </ng-container>\n                <!--Multi Choice DataElements-->\n                <ng-container *ngIf=\"DataElement.ElementType == 'MultiChoiceDataElement' \">\n                  <ng-container *ngFor=\"let choice of DataElement.ChoiceOptions\">\n                    <div class=\"checkbox\">\n                      <label >\n                        <input type=\"checkbox\" value={{choice.Value}} (change)=\"updateMultichoice(DataElement.ID,choice.Value,$event)\">\n                        <span> {{choice.Label}}</span>\n                      </label>\n                    </div>\n                  </ng-container>\n                </ng-container>\n\n                <!--NumericDataElement-->\n                <ng-container *ngIf=\"DataElement.ElementType == 'NumericDataElement' \">\n                  <input type=\"number\" [(ngModel)]=\"FormValues[DataElement.ID]\" class=\"form-control\" name=\"FormValues['{{DataElement.ID}}']\"\n                    (keypress)=\"itemSelected()\">\n                </ng-container>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  `,\n  styles: [`\n    .content-padding {\n      padding-top: 5px;\n      padding-right: 5px;\n    }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StringUtilityService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'DataElements': [{ type: Input },],\n'FormValues': [{ type: Input },],\n'ValidationBlocks': [{ type: Input },],\n};\n}\n\nfunction DataElementComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDataElementComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDataElementComponent.ctorParameters;\n/** @type {?} */\nDataElementComponent.propDecorators;\n/** @type {?} */\nDataElementComponent.prototype.DataElements;\n/** @type {?} */\nDataElementComponent.prototype.FormValues;\n/** @type {?} */\nDataElementComponent.prototype.ValidationBlocks;\n/** @type {?} */\nDataElementComponent.prototype.formInitialized;\n/** @type {?} */\nDataElementComponent.prototype.defaultOption;\n/** @type {?} */\nDataElementComponent.prototype.console;\n/** @type {?} */\nDataElementComponent.prototype.stringUtilityService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}