{"version":3,"sources":["report-text.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAmB,KAAA,EAA6B,MAAA,eAAA,CAAA;AAEzD,MAEC;IAFD;QAEG,eAAU,GAEW,EAAA,CAAG;QADxB,gBAAW,GAEiB,EAAA,CAAG;IA6DlC,CAAC;IA9DD;;;OAGG;IACH,QAAG,CAAA,IAAA;QACG,EAAE,CAAC,CAAC,IAAC,KAAQ,EAAA,CAAG,CAAC,CAAA;YACb,MAAM,CAAC,KAAA,CAAM;QACjB,CAAC;QACD,MAAM,CAAC,IAAA,CAAK,IAAC,CAAI,CAAC;IACtB,CAAC;IACH;;;OAGG;IACH,WAHG,CAAA,aAAA;QAIG,EAAE,CAAC,CAAC,KAHC,CAAK,OAAC,CAAO,IAAC,CAAI,UAAC,CAAU,aAAC,CAAa,CAAC,CAAC,CAAC,CAAA;YAI/C,MAAM,CAHC,IAAA,CAAK,UAAC,CAAU,aAAC,CAAa,CAAC,IAAC,CAAI,IAAC,CAAI,CAAC;QAIrD,CAAC;QACD,MAAM,CAHC,IAAA,CAAK,UAAC,CAAU,aAAC,CAAa,CAAC;IAI1C,CAAC;;AAFI,8BAAA,GAAoC;IAI3C,EAHE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAIvB,QAAQ,EAHE,iBAAA;gBAIV,QAAQ,EAHE;;;;;;;;;;;;;;;;;;;;;;;;GA2BT;gBACD,MAAM,EAHE,CAAA;;GAKP,CAHC;aAIH,EAHC,EAAG;CAIJ,CAHC;AAIF;;GAEG;AAJF,kCAAA,GAAA,MAAA,EAMA,CAVC;AAMK,kCAAA,GAAyD;IAMhE,YAAY,EALE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAM/B,aAAa,EALE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAM/B,CALC;AAQF;IACA,gBAAgB;IAChB,mBAAmB,CAAC,UAAU,CAAC;IAC/B;;;OAGG;IACH,mBAAmB,CAAC,cAAc,CAAC;IACnC,gBAAgB;IAChB,mBAAmB,CAAC,cAAc,CAAC;IACnC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,UAAU,CAAC;IACzC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC;AAC1C,CAAC","file":"report-text.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, Input , EventEmitter, Output} from '@angular/core';\nimport { ReportText } from '../shared/models/report-text.model';\nexport class ReportTextComponent  {\n\n   FormValues: Object = {};\n   ReportTexts: ReportText[] = [];\n/**\n * @param {?} cond\n * @return {?}\n */\nevaluate(cond) {\n      if (cond === '') {\n          return false;\n      }\n      return eval(cond);\n  }\n/**\n * @param {?} dataElementID\n * @return {?}\n */\nInsertValue(dataElementID) {\n      if (Array.isArray(this.FormValues[dataElementID])) {\n          return this.FormValues[dataElementID].join(', ');\n      }\n      return this.FormValues[dataElementID];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'acr-report-text',\n  template: `\n    <ng-container *ngFor=\"let ReportText of ReportTexts\">\n      <ng-container *ngIf=\"ReportText.ResultText != ''\">\n        <div >\n          <label> {{ReportText.ResultText}} </label>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"ReportText.DataElementID != ''\">\n        <div >\n          <label> {{InsertValue(ReportText.DataElementID)}} </label>\n        </div>\n        <br/>\n      </ng-container>\n\n      <ng-container *ngIf=\"ReportText.Condition != ''\">\n        <ng-container *ngIf=\"evaluate(ReportText.Condition)\">\n          <acr-report-text [ReportTexts]=\"ReportText.NestedReportText\" [FormValues]=\"FormValues\"></acr-report-text>\n        </ng-container>\n      </ng-container>\n\n      <ng-container *ngIf=\"ReportText.Condition == ''\">\n        <acr-report-text [ReportTexts]=\"ReportText.NestedReportText\" [FormValues]=\"FormValues\"></acr-report-text>\n      </ng-container>\n    </ng-container>\n  `,\n  styles: [`\n\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'FormValues': [{ type: Input },],\n'ReportTexts': [{ type: Input },],\n};\n}\n\nfunction ReportTextComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nReportTextComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nReportTextComponent.ctorParameters;\n/** @type {?} */\nReportTextComponent.propDecorators;\n/** @type {?} */\nReportTextComponent.prototype.FormValues;\n/** @type {?} */\nReportTextComponent.prototype.ReportTexts;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}