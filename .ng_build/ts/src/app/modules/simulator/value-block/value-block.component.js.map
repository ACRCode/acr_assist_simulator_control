{"version":3,"sources":["value-block.component.ts"],"names":[],"mappings":"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","file":"value-block.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport { ExpressionBlock } from '../shared/models/expression-block.model';\nimport { DataElement } from '../shared/models/data-element.model';\nimport { GlobalsService } from '../shared/services/globals.service';\nexport class ValueBlockComponent  {\n\n   ValueBlock: ExpressionBlock;\n   DataElement: DataElement;\n   DataElements: Object = {};\n   FormValues: Object = {};\n/**\n * @param {?} globalsService\n */\nconstructor(private globalsService: GlobalsService) {}\n/**\n * @param {?} exp\n * @return {?}\n */\nevaluate(exp) {\n      if (this.ValueBlock.ParentID === '0' && this.ValueBlock.Level === 0 && this.ValueBlock.Index === 0) {\n          this.globalsService.ComputedElementConditions[this.DataElement.ID] = {};\n          this.FormValues[this.DataElement.ID] = '';\n      }\n      if (this.FormValues[this.DataElement.ID] !== '') {\n        return false;\n      }\n      if (exp === '') {\n          return true;\n      }\n      const /** @type {?} */ result = eval(exp);\n      if (result) {\n          const /** @type {?} */ temp = this.globalsService.ComputedElementConditions[this.DataElement.ID];\n          temp[this.ValueBlock.ParentID] = this.ValueBlock.Index;\n          this.globalsService.ComputedElementConditions[this.DataElement.ID] = temp;\n          if (this.ValueBlock.TextExpression !== undefined && this.ValueBlock.TextExpression.length > 0) {\n            this.FormValues['hasAbnormality'] = this.textify(this.ValueBlock.TextExpression);\n          } else if (this.ValueBlock.ArithmeticExpression !== '') {\n            this.FormValues['hasAbnormality'] = this.compute(this.ValueBlock.ArithmeticExpression);\n          }\n      }\n      return result;\n\n    }\n/**\n * @param {?} exp\n * @return {?}\n */\nvalidate(exp) {\n      if (exp === '') {\n          return false;\n      }\n      return eval(exp);\n  }\n/**\n * @param {?} exp\n * @return {?}\n */\ncompute(exp) {\n      const /** @type {?} */ result = eval(exp);\n      this.DataElement.Value = result;\n      this.FormValues[this.DataElement.ID] = result;\n      return result;\n  }\n/**\n * @param {?} textBlocks\n * @return {?}\n */\ntextify(textBlocks) {\n      let /** @type {?} */ res = '';\n      if (textBlocks.constructor.name === 'String') {\n          res += textBlocks;\n      } else if (textBlocks.length > 0) {\n          textBlocks.forEach(text => {\n          if (text.constructor.name === 'String') {\n              res += text;\n          } else if (text.constructor.name === 'Object') {\n                  res += ' ' + this.FormValues[text.InsertValue.Attr.DataElementId] + ' ';\n          }\n          });\n      }\n      this.FormValues[this.DataElement.ID] = res;\n      return res;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'acr-value-block',\n  template: `\n    <ng-container *ngIf=\"!validate(ValueBlock.ValidationCondition)\">\n      <ng-container *ngIf=\"evaluate(ValueBlock.Condition)\">\n          <ng-container *ngIf=\"ValueBlock.ArithmeticExpression !=''\">\n              <ng-container *ngIf=\"DataElement.ShowValue\">\n                  <label class=\"control-label DEElement\">  {{compute(ValueBlock.ArithmeticExpression)}}</label>\n              </ng-container>\n              <ng-container *ngIf=\"!DataElement.ShowValue\">\n                  <input type=\"hidden\"   [attr.value]=\"compute(ValueBlock.ArithmeticExpression)\" />\n              </ng-container>\n          </ng-container>\n          <ng-container *ngIf=\"ValueBlock.TextExpression !== '' && ValueBlock.TextExpression !=undefined \">\n              <ng-container *ngIf=\"DataElement.ShowValue\">\n                  <label class=\"control-label DEElement\">  {{textify(ValueBlock.TextExpression)}}</label>\n              </ng-container>\n              <ng-container *ngIf=\"!DataElement.ShowValue\">\n                  <input type=\"hidden\"   [attr.value]=\"textify(ValueBlock.TextExpression)\" />\n              </ng-container>\n          </ng-container>\n          <ng-container *ngIf=\"ValueBlock.NestedBlocks.length > 0\">\n              <ng-container *ngFor=\"let NestedBlock of ValueBlock.NestedBlocks\">\n                  <acr-value-block [ValueBlock]=\"NestedBlock\" [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-value-block>\n              </ng-container>\n          </ng-container>\n      </ng-container>\n\n      <ng-container *ngIf=\"ValueBlock.ElseBlocks.length > 0\">\n          <ng-container *ngIf=\"!evaluate(ValueBlock.Condition)\">\n              <ng-container *ngFor=\"let ElseBlock of ValueBlock.ElseBlocks\">\n                  <acr-value-block [ValueBlock]=\"ElseBlock\" [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-value-block>\n              </ng-container>\n          </ng-container>\n      </ng-container>\n    </ng-container>\n  `,\n  styles: [`\n\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GlobalsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ValueBlock': [{ type: Input },],\n'DataElement': [{ type: Input },],\n'DataElements': [{ type: Input },],\n'FormValues': [{ type: Input },],\n};\n}\n\nfunction ValueBlockComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nValueBlockComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nValueBlockComponent.ctorParameters;\n/** @type {?} */\nValueBlockComponent.propDecorators;\n/** @type {?} */\nValueBlockComponent.prototype.ValueBlock;\n/** @type {?} */\nValueBlockComponent.prototype.DataElement;\n/** @type {?} */\nValueBlockComponent.prototype.DataElements;\n/** @type {?} */\nValueBlockComponent.prototype.FormValues;\n/** @type {?} */\nValueBlockComponent.prototype.globalsService;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}