{"version":3,"sources":["assist-simulator.component.ts"],"names":[],"mappings":"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","file":"assist-simulator.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, Input, ChangeDetectorRef, ChangeDetectionStrategy, OnChanges, SimpleChanges } from '@angular/core';\nimport { DataElement } from '../shared/models/data-element.model';\nimport { GlobalsService } from '../shared/services/globals.service';\nimport { ExpressionBlock } from '../shared/models/expression-block.model';\nimport { Metadata } from '../shared/models/metadata.model';\nimport { Parser } from '../shared/utils/parser';\nimport { TemplateDetails } from '../shared/models/template-details.model';\nimport { XMLUtil } from '../shared/utils/XMLUtil';\nexport class AssistSimulatorComponent implements OnInit , OnChanges {\n\n    templateContent: string;\n    imagePath: string;\n\n\n\n  errorMessage: string;\n  ErrorCode: number;\n  FormValues: Object;\n  ExpressionBlocks: ExpressionBlock[];\n  isValid: boolean;\n  DataElements: DataElement[];\n  FormChanged: boolean;\n  BaseFormValues: Object;\n  ValidationBlocks;\n  DataElementObj;\n  Metadata: Metadata;\n/**\n * @param {?} globalsService\n * @param {?} cd\n */\nconstructor(\nprivate globalsService: GlobalsService,\nprivate cd: ChangeDetectorRef\n\n  ) {\n\n\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    this.processData();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.processData();\n\n  }\n/**\n * @return {?}\n */\nresetData() {\n\n    this.FormValues = {};\n    this.BaseFormValues = {};\n    this.ExpressionBlocks = [];\n    this.DataElements = [];\n    this.ValidationBlocks = [];\n    this.DataElementObj = {};\n\n    this.globalsService.XMLAcronyms = {};\n    this.ExpressionBlocks = [];\n    this.DataElements = [];\n    this.Metadata = undefined;\n    this.FormValues = {};\n    this.ValidationBlocks = [];\n    this.globalsService.evaluateExpessions = true;\n    this.globalsService.ComputedElementConditions = {};\n    this.globalsService.XMLAcronyms = {};\n\n  }\n/**\n * @return {?}\n */\nprocessData() {\n\n      this.resetData();\n      this.isValid = this.templateContent.length > 0 && this.imagePath.length  > 0;\n\n      const /** @type {?} */ templateDetails = new TemplateDetails ();\n      templateDetails.imagePath = this.imagePath;\n      templateDetails.templateContent = this.templateContent;\n      const /** @type {?} */ util = new XMLUtil();\n      util.load(templateDetails);\n\n      this.globalsService.XMLAcronyms  = util.Acronyms;\n      this.Metadata = util.Metadata;\n      this.DataElements = util.DataElements;\n      this.ExpressionBlocks = util.ExpressionBlocks;\n      this.ValidationBlocks = util.ValidationBlocks;\n      this.FormValues = util.FormValues;\n      this.BaseFormValues = JSON.parse(JSON.stringify(this.FormValues));\n\n    }\n/**\n * @param {?} notRelevantDataElments\n * @return {?}\n */\ndisplayDataElements(notRelevantDataElments) {\n\n     this.DataElements.forEach(de => {\n         const /** @type {?} */ deindex = this.DataElements.indexOf(de);\n         if (notRelevantDataElments !== undefined && notRelevantDataElments.indexOf(deindex) !== -1) {\n             de.Visible = false;\n         } else {\n             de.Visible = true;\n         }\n     });\n     this.globalsService.evaluateExpessions = false;\n     this.cd.detectChanges();\n     this.globalsService.evaluateExpessions = true;\n }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'acr-assist-simulator',\n  template: `\n    <ng-container *ngIf=\"(isValid!=true && isValid!= null)\">\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-center alert alert-danger\">\n          <ng-container *ngIf=\"(ErrorCode == 0)\">\n            {{errorMessage}}. So we are unable to validate XML.\n          </ng-container>\n          <ng-container *ngIf=\"(ErrorCode == 1)\">\n            Selected XML does not meets the XML Schema.\n          </ng-container>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"(isValid)\">\n      <ng-container *ngIf=\"Metadata != undefined\">\n        <div class=\"row\">\n          <div class=\"col-sm-12 text-center border-0\">\n            <h4>\n              <strong>{{Metadata.Label}} </strong>\n            </h4>\n          </div>\n        </div>\n      </ng-container>\n      <div class=\"row content-padding\">\n        <ng-container *ngIf=\"globalsService.LoadkeyDiagram != true\">\n          <div class=\"col-sm-12 \">\n            <ng-container *ngIf=\"(isValid)\">\n                <form #form=\"ngForm\" class=\"form-horizontal\">\n                <acr-data-element [ValidationBlocks]=\"ValidationBlocks\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-data-element>\n              </form>\n            </ng-container>\n          </div>\n        </ng-container>\n        <ng-container *ngIf=\"globalsService.LoadkeyDiagram == true\">\n          <div class=\"col-sm-7 \">\n            <ng-container *ngIf=\"(isValid)\">\n               <form #form=\"ngForm\" class=\"form-horizontal\">\n                <acr-data-element [ValidationBlocks]=\"ValidationBlocks\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-data-element>\n              </form>\n            </ng-container>\n          </div>\n          <div class=\"col-sm-5 padding-top-5\">\n            <div id=\"myNav\">\n              <ng-container *ngIf=\"Metadata != undefined\">\n                <ng-container *ngIf=\"globalsService.LoadkeyDiagram == true\">\n                  <div class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"false\">\n                    <!-- Wrapper for slides -->\n                    <div class=\"carousel-inner\" role=\"listbox\">\n                      <ng-container *ngFor=\"let diag of Metadata.Diagrams \">\n                        <ng-container *ngIf=\"Metadata.Diagrams.indexOf(diag) == 0\">\n                          <div class=\"item active\">\n                            <img src=\"{{diag.ImagePath}}\">\n                          </div>\n                        </ng-container>\n\n                        <ng-container *ngIf=\"Metadata.Diagrams.indexOf(diag) > 0\">\n                          <div class=\"item\">\n                          </div>\n                        </ng-container>\n                      </ng-container>\n                    </div>\n                    <ng-container *ngIf=\"Metadata.Diagrams.length > 1\">\n                      <!-- Controls -->\n                      <a class=\"left carousel-control\" onclick=\"return false;\" href=\"#carousel-example-generic\" role=\"button\" data-slide=\"prev\">\n                        <span class=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"></span>\n                        <span class=\"sr-only\">Previous</span>\n                      </a>\n                      <a class=\"right carousel-control\" onclick=\"return false;\" href=\"#carousel-example-generic\" role=\"button\" data-slide=\"next\">\n                        <span class=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"></span>\n                        <span class=\"sr-only\">Next</span>\n                      </a>\n                    </ng-container>\n                  </div>\n                </ng-container>\n              </ng-container>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          <ng-container >\n            <ng-container *ngFor=\"let block of ExpressionBlocks\">\n              <acr-expresssion-block [ExpBlock]=\"block\" [FormValues]=\"FormValues\" [DataElements]=\"DataElements\" (onExpressionChanged)=\"displayDataElements($event)\"></acr-expresssion-block>\n            </ng-container>\n          </ng-container>\n        </div>\n      </div>\n    </ng-container>\n  `,\n  styles: [`\n    .content-padding {\n      padding-top: 5px;\n      padding-right: 5px;\n    }\n  `],\n  changeDetection : ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GlobalsService, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateContent': [{ type: Input },],\n'imagePath': [{ type: Input },],\n};\n}\n\nfunction AssistSimulatorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAssistSimulatorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAssistSimulatorComponent.ctorParameters;\n/** @type {?} */\nAssistSimulatorComponent.propDecorators;\n/** @type {?} */\nAssistSimulatorComponent.prototype.templateContent;\n/** @type {?} */\nAssistSimulatorComponent.prototype.imagePath;\n/** @type {?} */\nAssistSimulatorComponent.prototype.errorMessage;\n/** @type {?} */\nAssistSimulatorComponent.prototype.ErrorCode;\n/** @type {?} */\nAssistSimulatorComponent.prototype.FormValues;\n/** @type {?} */\nAssistSimulatorComponent.prototype.ExpressionBlocks;\n/** @type {?} */\nAssistSimulatorComponent.prototype.isValid;\n/** @type {?} */\nAssistSimulatorComponent.prototype.DataElements;\n/** @type {?} */\nAssistSimulatorComponent.prototype.FormChanged;\n/** @type {?} */\nAssistSimulatorComponent.prototype.BaseFormValues;\n/** @type {?} */\nAssistSimulatorComponent.prototype.ValidationBlocks;\n/** @type {?} */\nAssistSimulatorComponent.prototype.DataElementObj;\n/** @type {?} */\nAssistSimulatorComponent.prototype.Metadata;\n/** @type {?} */\nAssistSimulatorComponent.prototype.globalsService;\n/** @type {?} */\nAssistSimulatorComponent.prototype.cd;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}