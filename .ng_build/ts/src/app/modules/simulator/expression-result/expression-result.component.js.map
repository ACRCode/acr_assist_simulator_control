{"version":3,"sources":["expression-result.component.ts"],"names":[],"mappings":"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","file":"expression-result.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit , Input, AfterViewInit } from '@angular/core';\nimport { GlobalsService } from '../shared/services/globals.service';\nimport { ExpressionBlock } from '../shared/models/expression-block.model';\nimport { EndPoint } from '../shared/models/endpoint.model';\nimport { DataElement } from '../shared/models/data-element.model';\nexport class ExpressionResultComponent  implements OnInit {\n\n\n       ExpBlock: ExpressionBlock;\n       Result: EndPoint;\n       FormValues: Object = {};\n       DataElements: DataElement[] = [];\n      sectionResult = '';\n      selectedSection = '';\n      result: string;\n/**\n * @return {?}\n */\nngOnInit()  {\n          if (this.Result.ReportSections.length > 0) {\n              this.selectedSection = this.Result.ReportSections[0].Heading;\n          }\n       }\n/**\n * @return {?}\n */\ngetResultText() {\n          const /** @type {?} */ res = {};\n          for (const /** @type {?} */ section of this.Result.ReportSections) {\n              const /** @type {?} */ sectionResult = this.generateSectionResult(section);\n              res[sectionResult.Heading] = sectionResult.ReportText;\n          }\n          return res;\n      }\n/**\n * @param {?} reportSection\n * @return {?}\n */\ngenerateSectionResult(reportSection) {\n           const /** @type {?} */ reportText = this.textifyReportText(reportSection.ReportTexts);\n           return { 'Heading': reportSection.Heading, 'ReportText': reportText };\n\n      }\n/**\n * @param {?} reportTexts\n * @return {?}\n */\ntextifyReportText(reportTexts) {\n          let /** @type {?} */ res = '';\n          for (const /** @type {?} */ reportText of reportTexts) {\n              if (reportText.ResultText !== '') {\n                  res += reportText.ResultText;\n              }\n              if (reportText.DataElementID !== '') {\n                  res += this.FormValues[reportText.DataElementID];\n              }\n              if (reportText.Condition !== '') {\n                  if (this.evaluate(reportText.Condition)) {\n                      res += this.textifyReportText(reportText.NestedReportText);\n                  }\n              }\n              if (reportText.Condition === '') {\n                  res += this.textifyReportText(reportText.NestedReportText);\n              }\n          }\n          return res;\n      }\n/**\n * @param {?} cond\n * @return {?}\n */\nevaluate(cond) {\n          if (cond === '') {\n              return false;\n          }\n          const /** @type {?} */ res = eval(cond);\n          return res;\n      }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'acr-expression-result',\n  template: `\n    <div class=\"panel panel-default\">\n\n      <div class=\"panel-heading text-left\">\n        Report Text: <select id=\"ddlSections\" (change)=\"generateReportText()\" [(ngModel)]=\"selectedSection\">\n          <ng-container *ngFor=\"let Section of Result.ReportSections\">\n            <option [value]=\"Section.Heading\" [selected]=\"Section.Heading == 'findings'\">{{Section.Heading}}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n    <div>\n      <ng-container *ngFor=\"let Section of Result.ReportSections\">\n        <ng-container *ngIf=\"selectedSection == Section.Heading\">\n          <acr-report-text [ReportTexts]=\"Section.ReportTexts\" [FormValues]=\"FormValues\"></acr-report-text>\n        </ng-container>\n      </ng-container>\n    </div>\n  `,\n  styles: [`\n\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ExpBlock': [{ type: Input },],\n'Result': [{ type: Input },],\n'FormValues': [{ type: Input },],\n'DataElements': [{ type: Input },],\n};\n}\n\nfunction ExpressionResultComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nExpressionResultComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExpressionResultComponent.ctorParameters;\n/** @type {?} */\nExpressionResultComponent.propDecorators;\n/** @type {?} */\nExpressionResultComponent.prototype.ExpBlock;\n/** @type {?} */\nExpressionResultComponent.prototype.Result;\n/** @type {?} */\nExpressionResultComponent.prototype.FormValues;\n/** @type {?} */\nExpressionResultComponent.prototype.DataElements;\n/** @type {?} */\nExpressionResultComponent.prototype.sectionResult;\n/** @type {?} */\nExpressionResultComponent.prototype.selectedSection;\n/** @type {?} */\nExpressionResultComponent.prototype.result;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}