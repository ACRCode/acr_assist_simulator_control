{"version":3,"sources":["computed-element.component.ts"],"names":[],"mappings":"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","file":"computed-element.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport { DataElement } from '../shared/models/data-element.model';\nimport { StringUtilityService } from '../shared/services/string-utility.service';\nexport class ComputedElementComponent {\n\n   DataElement: DataElement;\n   DataElements: Object = {};\n   FormValues: Object = {};\n/**\n * @param {?} stringUtilityService\n */\nconstructor(private stringUtilityService: StringUtilityService) {\n\n  }\n/**\n * @param {?} exp\n * @return {?}\n */\ncompute(exp) {\n    const /** @type {?} */ result = eval(exp);\n    this.DataElement.Value = result;\n    this.FormValues[this.DataElement.ID] = result;\n    return result;\n  }\n/**\n * @param {?} textBlocks\n * @return {?}\n */\ntextify(textBlocks) {\n    let /** @type {?} */ result = '';\n    if (textBlocks.constructor.name === 'String') {\n      result += textBlocks;\n    } else if (textBlocks.length > 0) {\n      textBlocks.forEach(text => {\n        if (text.constructor.name === 'String') {\n          result += text;\n        } else if (text.constructor.name === 'Object') {\n          result += ' ' +  this.FormValues[text.InsertValue.Attr.DataElementId] + ' ';\n        }\n      });\n    }\n    this.FormValues[this.DataElement.ID] = result;\n    return result;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'acr-computed-element',\n  template: `\n    <ng-container *ngIf=\"DataElement.Visible && DataElement.ShowValue\">\n      <div class=\"form-group\" [class.Visible]=\"(DataElement.Visible && DataElement.ShowValue)\">\n\n          <div class=\"col-sm-3\">\n              <label class=\"control-label DEElement\" id=\"{{DataElement.ID}}\">\n                  {{DataElement.ID}}\n              </label>\n              <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.Hint) \">\n                  <a>\n                      <span class=\"glyphicon glyphicon-info-sign\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"{{DataElement.Hint}}\"></span>\n                  </a>\n              </ng-container>\n          </div>\n          <div class=\"col-sm-6\">\n\n              <ng-container *ngFor=\"let valueBlock of DataElement.ValueBlocks\">\n                  <acr-value-block [ValueBlock]=\"valueBlock\" [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\">\n                  </acr-value-block>\n              </ng-container>\n\n              <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.ArithmaticExpression)\">\n                  <label class=\"control-label DEElement\"> {{compute(DataElement.ArithmaticExpression)}}</label>\n              </ng-container>\n              <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.TextExpression)\">\n                  <label class=\"control-label DEElement\"> {{textify(DataElement.TextExpression)}}</label>\n              </ng-container>\n          </div>\n      </div>\n\n    </ng-container>\n\n    <ng-container *ngIf=\"!DataElement.ShowValue\">\n      <ng-container *ngFor=\"let valueBlock of DataElement.ValueBlocks\">\n          <acr-value-block [ValueBlock]=\"valueBlock\" [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\">\n\n          </acr-value-block>\n\n      </ng-container>\n\n      <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.ArithmaticExpression)\">\n          <input type=\"hidden\" [attr.value]=\"compute(DataElement.ArithmaticExpression)\" />\n      </ng-container>\n      <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.TextExpression)\">\n          <input type=\"hidden\" [attr.value]=\"textify(DataElement.TextExpression)\" />\n      </ng-container>\n\n    </ng-container>\n  `,\n  styles: [`\n\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StringUtilityService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'DataElement': [{ type: Input },],\n'DataElements': [{ type: Input },],\n'FormValues': [{ type: Input },],\n};\n}\n\nfunction ComputedElementComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nComputedElementComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nComputedElementComponent.ctorParameters;\n/** @type {?} */\nComputedElementComponent.propDecorators;\n/** @type {?} */\nComputedElementComponent.prototype.DataElement;\n/** @type {?} */\nComputedElementComponent.prototype.DataElements;\n/** @type {?} */\nComputedElementComponent.prototype.FormValues;\n/** @type {?} */\nComputedElementComponent.prototype.stringUtilityService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}