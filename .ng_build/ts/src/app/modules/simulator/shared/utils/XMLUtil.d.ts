import { DataElement } from '../models/data-element.model';
import { Metadata } from '../models/metadata.model';
import { TemplateDetails } from '../models/template-details.model';
export declare class XMLUtil {
    DataElements: DataElement[];
    private DataElementsObj;
    Acronyms: {};
    xmlFileJSON: {};
    private templateDetails;
    TemplatePartials: {};
    ExpressionBlocks: any[];
    Endpoints: {};
    NewEndPoints: {};
    ValidationBlocks: any[];
    private ValidationBlocksObj;
    FormValues: {};
    Metadata: Metadata;
    private unique(arr);
    private AppendToDataElements(elem);
    private parseBaseDataElement(elemObj);
    private createDiagram(element);
    private parseGlobalDataElement(elemObj);
    private createChoiceOption(choice, elem);
    private parseChoiceDataElements(elemObj);
    private parseMultiChoiceDataElements(elemObj);
    private parseNumericDataElements(elemObj);
    private parseComputedDataElement(elemObj);
    private parseDataElements();
    load(templateDetails: TemplateDetails): void;
    private loadMetaData();
    private parseMetaDataDiagram(diag);
    private loadTemplatePartials();
    private loadEndPoints();
    private parseEndPoint(endPoint);
    private parseReportSection(obj);
    private parseReportText(obj);
    private generateExpressions();
    private parseDecissionPoint(decissionPoint, level, parentID, notRelavantItems);
    private parseNotRelevantElements(obj);
    private parseBranch(branch, level, index, parentID, notRelavantItems);
    private parseArithmaticExpression(expression);
    private cleanArithmaticExpression(expression, op);
    private buildExpression(attr, op);
    private buildContainsExpression(attr);
    private buildNoChoiceExpression(attr);
    private buildExpressions(obj, op);
}
