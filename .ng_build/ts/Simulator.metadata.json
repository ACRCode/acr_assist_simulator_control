{"__symbolic":"module","version":3,"metadata":{"SimulatorModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule"},"arguments":[{"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule"},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule"}],"declarations":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵc"},{"__symbolic":"reference","name":"ɵe"},{"__symbolic":"reference","name":"ɵf"},{"__symbolic":"reference","name":"ɵg"},{"__symbolic":"reference","name":"ɵh"},{"__symbolic":"reference","name":"ɵi"},{"__symbolic":"reference","name":"ɵj"},{"__symbolic":"reference","name":"ɵk"}],"exports":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵc"},{"__symbolic":"reference","name":"ɵe"},{"__symbolic":"reference","name":"ɵf"},{"__symbolic":"reference","name":"ɵg"},{"__symbolic":"reference","name":"ɵh"},{"__symbolic":"reference","name":"ɵi"},{"__symbolic":"reference","name":"ɵj"},{"__symbolic":"reference","name":"ɵk"}],"providers":[{"__symbolic":"reference","name":"ɵd"},{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","name":"ɵl"}]}]}],"members":{}},"SimulatorLoaderModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule"},"arguments":[{"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule"}],"declarations":[[{"__symbolic":"reference","name":"ɵm"}]],"exports":[[{"__symbolic":"reference","name":"ɵm"}]]}]}],"members":{}},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acr-assist-simulator","template":"\n    <ng-container *ngIf=\"(isValid!=true && isValid!= null)\">\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-center alert alert-danger\">\n          <ng-container *ngIf=\"(ErrorCode == 0)\">\n            {{errorMessage}}. So we are unable to validate XML.\n          </ng-container>\n          <ng-container *ngIf=\"(ErrorCode == 1)\">\n            Selected XML does not meets the XML Schema.\n          </ng-container>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"(isValid)\">\n      <ng-container *ngIf=\"Metadata != undefined\">\n        <div class=\"row\">\n          <div class=\"col-sm-12 text-center border-0\">\n            <h4>\n              <strong>{{Metadata.Label}} </strong>\n            </h4>\n          </div>\n        </div>\n      </ng-container>\n      <div class=\"row content-padding\">\n        <ng-container *ngIf=\"globalsService.LoadkeyDiagram != true\">\n          <div class=\"col-sm-12 \">\n            <ng-container *ngIf=\"(isValid)\">\n                <form #form=\"ngForm\" class=\"form-horizontal\">\n                <acr-data-element [ValidationBlocks]=\"ValidationBlocks\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-data-element>\n              </form>\n            </ng-container>\n          </div>\n        </ng-container>\n        <ng-container *ngIf=\"globalsService.LoadkeyDiagram == true\">\n          <div class=\"col-sm-7 \">\n            <ng-container *ngIf=\"(isValid)\">\n               <form #form=\"ngForm\" class=\"form-horizontal\">\n                <acr-data-element [ValidationBlocks]=\"ValidationBlocks\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-data-element>\n              </form>\n            </ng-container>\n          </div>\n          <div class=\"col-sm-5 padding-top-5\">\n            <div id=\"myNav\">\n              <ng-container *ngIf=\"Metadata != undefined\">\n                <ng-container *ngIf=\"globalsService.LoadkeyDiagram == true\">\n                  <div class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"false\">\n                    <!-- Wrapper for slides -->\n                    <div class=\"carousel-inner\" role=\"listbox\">\n                      <ng-container *ngFor=\"let diag of Metadata.Diagrams \">\n                        <ng-container *ngIf=\"Metadata.Diagrams.indexOf(diag) == 0\">\n                          <div class=\"item active\">\n                            <img src=\"{{diag.ImagePath}}\">\n                          </div>\n                        </ng-container>\n\n                        <ng-container *ngIf=\"Metadata.Diagrams.indexOf(diag) > 0\">\n                          <div class=\"item\">\n                          </div>\n                        </ng-container>\n                      </ng-container>\n                    </div>\n                    <ng-container *ngIf=\"Metadata.Diagrams.length > 1\">\n                      <!-- Controls -->\n                      <a class=\"left carousel-control\" onclick=\"return false;\" href=\"#carousel-example-generic\" role=\"button\" data-slide=\"prev\">\n                        <span class=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"></span>\n                        <span class=\"sr-only\">Previous</span>\n                      </a>\n                      <a class=\"right carousel-control\" onclick=\"return false;\" href=\"#carousel-example-generic\" role=\"button\" data-slide=\"next\">\n                        <span class=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"></span>\n                        <span class=\"sr-only\">Next</span>\n                      </a>\n                    </ng-container>\n                  </div>\n                </ng-container>\n              </ng-container>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          <ng-container >\n            <ng-container *ngFor=\"let block of ExpressionBlocks\">\n              <acr-expresssion-block [ExpBlock]=\"block\" [FormValues]=\"FormValues\" [DataElements]=\"DataElements\" (onExpressionChanged)=\"displayDataElements($event)\"></acr-expresssion-block>\n            </ng-container>\n          </ng-container>\n        </div>\n      </div>\n    </ng-container>\n  ","styles":["\n    .content-padding {\n      padding-top: 5px;\n      padding-right: 5px;\n    }\n  "],"changeDetection":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectionStrategy"},"member":"OnPush"}}]}],"members":{"templateContent":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"imagePath":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"}]}],"ngOnChanges":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"resetData":[{"__symbolic":"method"}],"processData":[{"__symbolic":"method"}],"displayDataElements":[{"__symbolic":"method"}]}},"ɵb":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable"}}],"members":{}},"ɵc":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acr-computed-element","template":"\n    <ng-container *ngIf=\"DataElement.Visible && DataElement.ShowValue\">\n      <div class=\"form-group\" [class.Visible]=\"(DataElement.Visible && DataElement.ShowValue)\">\n\n          <div class=\"col-sm-3\">\n              <label class=\"control-label DEElement\" id=\"{{DataElement.ID}}\">\n                  {{DataElement.ID}}\n              </label>\n              <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.Hint) \">\n                  <a>\n                      <span class=\"glyphicon glyphicon-info-sign\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"{{DataElement.Hint}}\"></span>\n                  </a>\n              </ng-container>\n          </div>\n          <div class=\"col-sm-6\">\n\n              <ng-container *ngFor=\"let valueBlock of DataElement.ValueBlocks\">\n                  <acr-value-block [ValueBlock]=\"valueBlock\" [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\">\n                  </acr-value-block>\n              </ng-container>\n\n              <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.ArithmaticExpression)\">\n                  <label class=\"control-label DEElement\"> {{compute(DataElement.ArithmaticExpression)}}</label>\n              </ng-container>\n              <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.TextExpression)\">\n                  <label class=\"control-label DEElement\"> {{textify(DataElement.TextExpression)}}</label>\n              </ng-container>\n          </div>\n      </div>\n\n    </ng-container>\n\n    <ng-container *ngIf=\"!DataElement.ShowValue\">\n      <ng-container *ngFor=\"let valueBlock of DataElement.ValueBlocks\">\n          <acr-value-block [ValueBlock]=\"valueBlock\" [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\">\n\n          </acr-value-block>\n\n      </ng-container>\n\n      <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.ArithmaticExpression)\">\n          <input type=\"hidden\" [attr.value]=\"compute(DataElement.ArithmaticExpression)\" />\n      </ng-container>\n      <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.TextExpression)\">\n          <input type=\"hidden\" [attr.value]=\"textify(DataElement.TextExpression)\" />\n      </ng-container>\n\n    </ng-container>\n  ","styles":["\n\n  "]}]}],"members":{"DataElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"DataElements":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"FormValues":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵd"}]}],"compute":[{"__symbolic":"method"}],"textify":[{"__symbolic":"method"}]}},"ɵd":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable"}}],"members":{"isEmpty":[{"__symbolic":"method"}],"cleanText":[{"__symbolic":"method"}]}},"ɵe":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acr-hint-diagram","template":"\n    <button type=\"button\" class=\"btn btn-default btn-xs\" data-toggle=\"modal\" attr.data-target=\"#{{'diag_'+DataElement.ID}}\">\n      <span class=\" glyphicon glyphicon-cd\" aria-hidden=\"true\" data-toggle=\"tooltip\"  data-placement=\"right\" title=\"Hint Diagrams\"></span>\n\n    </button>\n    <div class=\"modal fade adjust-diagram \" tabindex=\"-1\" role=\"dialog\" attr.id=\"{{'diag_'+DataElement.ID}}\" aria-labelledby=\"mySmallModalLabel\">\n    <div class=\"modal-dialog modal-lg adjust-diagram-image \" role=\"document\">\n    <div class=\"modal-content\">\n    <div class=\"modal-header\">\n    <h4 class=\"modal-title\">\n    {{DataElement.Label}}\n    </h4>\n    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">×</span></button>\n    </div>\n\n\n\n    <div class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"false\">\n\n\n    <!-- Wrapper for slides -->\n\n    <div class=\"carousel-inner\" role=\"listbox\">\n    <ng-container *ngFor=\"let diag of DataElement.Diagrams \">\n    <ng-container *ngIf=\"DataElement.Diagrams.indexOf(diag) == 0\">\n    <div class=\"item active\">\n    <img src=\"{{diag.Location}}\">\n    <!--<div class=\"carousel-caption\">\n\n    </div>-->\n    </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"DataElement.Diagrams.indexOf(diag) > 0\">\n    <div class=\"item\">\n    <img src=\"{{diag.Location}}\">\n    <!--<div class=\"carousel-caption\">\n\n    </div>-->\n    </div>\n    </ng-container>\n\n    </ng-container>\n\n\n\n\n    </div>\n    <ng-container *ngIf=\"DataElement.Diagrams.length > 1\">\n    <!-- Controls -->\n    <a class=\"left carousel-control\" onclick=\"return false;\" href=\"#carousel-example-generic\" role=\"button\" data-slide=\"prev\">\n    <span class=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"></span>\n    <span class=\"sr-only\">Previous</span>\n    </a>\n    <a class=\"right carousel-control\" onclick=\"return false;\" href=\"#carousel-example-generic\" role=\"button\" data-slide=\"next\">\n    <span class=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"></span>\n    <span class=\"sr-only\">Next</span>\n    </a>\n    </ng-container>\n    </div>\n\n\n\n\n    </div>\n    </div>\n    </div>\n  ","styles":["\n\n  "]}]}],"members":{"DataElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}]}},"ɵf":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acr-image-map","template":"\n    <ng-container *ngIf=\"DataElement.ImagePath != undefined\">\n\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-center\">\n          OR\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-left\">\n          Select value from image:-\n            <button type=\"button\" class=\"btn btn-default\" data-toggle=\"modal\" attr.data-target=\"#{{'imgMap_Modal_'+DataElement.ID}}\">\n            <span class=\"glyphicon glyphicon-picture\" aria-hidden=\"true\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Image Map\"></span>\n          </button>\n        </div>\n      </div>\n\n      <ng-container *ngIf=\"DataElement.ImagePath != undefined\">\n        <div class=\"modal fade img-modal\" tabindex=\"-1\" role=\"dialog\" attr.id=\"{{'imgMap_Modal_'+DataElement.ID}}\" aria-labelledby=\"mySmallModalLabel\">\n          <div class=\"modal-dialog modal-lg\" role=\"document\" [ngStyle]=\"{'width':DataElement.ImagePath.width + 30}\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h4 class=\"modal-title\">\n                  {{SelectionValue}}\n                </h4>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                  <span aria-hidden=\"true\">×</span>\n                </button>\n              </div>\n              <div class=\"modal-body\">\n                <div class=\"row\">\n                  <div class=\"col-md-12\">\n                    <ng-container *ngIf=\"imageExist == true\">\n                      <img class=\"ImgOption danger\" alt=\"No Image Available!!!\" data-dismiss=\"modal\" attr.id=\"{{'imgMap_Img_'+DataElement.ID}}\"\n                        (click)=\"imageClick($event,DataElement);\" attr.data-elementID=\"{{DataElement.ID}}\" attr.usemap=\"#{{'imgMap_'+DataElement.ID}}\"\n                        src=\"{{DataElement.ImagePath}}\">\n                      <map name=\"{{'imgMap_'+DataElement.ID}}\">\n                        <ng-container *ngFor=\"let imgOpt of DataElement.ImageOptions\">\n                          <area attr.shape=\"{{imgOpt.Shape}}\" attr.imgID=\"{{'imgMap_Img_'+DataElement.ID}}\" attr.coords=\"{{imgOpt.Coordinates}}\" attr.alt=\"{{imgOpt.Value}}\"\n                            onmouseover='myHover(this);' onmouseout='myLeave();' (mouseover)='displayValue(imgOpt.Value);' (mouseout)='displayValue(\"\");'\n                            (click)=\"setValue(imgOpt.Value);\" data-dismiss=\"modal\">\n                        </ng-container>\n                      </map>\n                    </ng-container>\n\n                    <ng-container *ngIf=\"imageExist == false\">\n                      <div class=\"\">\n                        No Image Map Available...\n                      </div>\n                    </ng-container>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n  ","styles":["\n\n  "]}]}],"members":{"DataElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"DataElements":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"FormValues":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"ngOnInit":[{"__symbolic":"method"}],"isInRectangle":[{"__symbolic":"method"}],"isInCircle":[{"__symbolic":"method"}],"isInPolygon":[{"__symbolic":"method"}],"imageClick":[{"__symbolic":"method"}],"setValue":[{"__symbolic":"method"}],"displayValue":[{"__symbolic":"method"}]}},"ɵg":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acr-data-element","template":"\n    <canvas id='Can-ImgMap'>\n\n    </canvas>\n    <ng-container *ngFor=\"let DataElement of DataElements\">\n\n\n\n      <ng-container *ngIf=\"(DataElement.ElementType == 'ComputedElement')\">\n        <acr-computed-element [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-computed-element>\n      </ng-container>\n\n\n      <ng-container *ngIf=\"(DataElement.ElementType == 'ChoiceDataElement' || DataElement.ElementType == 'NumericDataElement' || DataElement.ElementType == 'IntegerDataElement' || DataElement.ElementType == 'MultiChoiceDataElement') \">\n        <ng-container *ngIf=\"DataElement.Visible\">\n          <div class=\"form-group \" [class.Visible]=\"DataElement.Visible\">\n            <div class=\"col-sm-5 text-left content-padding\">\n              <label class=\"control-label DEElement\" id=\"{{DataElement.ID}}\">\n                {{DataElement.Label}}\n              </label>\n              <ng-container *ngIf=\"!stringUtilityService.isEmpty(DataElement.Hint) \">\n                <a>\n                  <span class=\"glyphicon glyphicon-info-sign\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"{{DataElement.Hint}}\"></span>\n                </a>\n              </ng-container>\n              <ng-container *ngIf=\"DataElement.Diagrams != undefined \">\n                <acr-hint-diagram [DataElement]=\"DataElement\"></acr-hint-diagram>\n              </ng-container>\n              <ng-container *ngIf=\"ValidationBlocks.length > 0\">\n                <ng-container *ngFor=\"let Block of ValidationBlocks\">\n                  <ng-container *ngIf=\"(DataElement.Visible)\">\n                    <ng-container *ngIf=\"evaluate(Block.Condition)\">\n                      <ng-container *ngIf=\"Block.DataElementID == DataElement.ID\">\n                        <ng-container *ngIf=\"Block.Message =='Minimum value required'\">\n                          <span class=\"required-field\">Minimum Value: {{Block.Minimum}}</span>\n                        </ng-container>\n                        <ng-container *ngIf=\"Block.Message != 'Minimum value required'\">\n                          <span class=\"required-field\">* Required field !!!</span>\n                        </ng-container>\n                      </ng-container>\n                    </ng-container>\n                  </ng-container>\n                </ng-container>\n              </ng-container>\n            </div>\n\n            <div class=\"col-sm-7 text-left content-padding\">\n              <div class=\"input-group \">\n                <!--Choice DataElements-->\n                <ng-container *ngIf=\"DataElement.ElementType == 'ChoiceDataElement' \">\n                  <div class=\"row\">\n                    <ng-container *ngIf=\"DataElement.ChoiceOptions.length == 2\">\n                      <!-- Full width for radio if Imagepath exist -->\n                      <ng-container *ngIf=\"DataElement.ImagePath != undefined\">\n                        <div id=\"radio-inline\">\n                          <ng-container *ngFor=\"let choice of DataElement.ChoiceOptions\">\n                              <div class=\"row\">\n                                  <div class=\"col-sm-12\">\n                            <label class=\"rad DEValues\">\n                              <input type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                checked style=\"display:none;\">\n                              <div  (click)=\"itemSelected()\">\n                                <input class=\"hideInput\" type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                  checked>\n                                <span>{{choice.Label}}</span>\n\n                              </div>\n                              <div class=\"clear\"></div>\n                            </label>\n                            </div></div>\n                          </ng-container>\n                        </div>\n                      </ng-container>\n                      <!-- Full width for radio if Imagepath does not exist -->\n                      <ng-container *ngIf=\"DataElement.ImagePath == undefined\">\n                        <div id=\"radio-inline\">\n                          <ng-container *ngFor=\"let choice of DataElement.ChoiceOptions\">\n                            <div class=\"row\">\n                                <div class=\"col-sm-12\">\n                                    <label class=\"rad DEValues\">\n                                        <input type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                          checked style=\"display:none;\">\n                                        <div  (click)=\"itemSelected()\" >\n                                          <input class=\"hideInput\" type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                            checked>\n                                          <span>{{choice.Label}}</span>\n                                        </div>\n\n                                      </label>\n                                </div>\n                            </div>\n\n                          </ng-container>\n                        </div>\n                      </ng-container>\n                    </ng-container>\n                    <ng-container *ngIf=\"DataElement.ChoiceOptions.length != 2\">\n                      <!-- Dropdown will be created if choice options have more than 5 choices-->\n                      <ng-container *ngIf=\"DataElement.ChoiceOptions.length > 5\">\n                        <select id=\"{{DataElement.ID}}\" [(ngModel)]=\"FormValues[DataElement.ID]\" (ngModelChange)=\"itemSelected()\">\n                          <option [value]=\"Select\">--Select--</option>\n                          <option *ngFor=\"let choice of DataElement.ChoiceOptions\" [value]=\"choice.Value\">{{choice.Label}}</option>\n                        </select>\n                      </ng-container>\n                      <!-- Radio button will be created if choice options have are <=5 choices-->\n                      <ng-container *ngIf=\"DataElement.ChoiceOptions.length <= 5\">\n                        <ng-container *ngFor=\"let choice of DataElement.ChoiceOptions\">\n                          <div id=\"radio-inline\">\n                              <div class=\"row\">\n                                  <div class=\"col-sm-12\">\n                                    <label class=\"rad DEValues\">\n                                      <input type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                        checked style=\"display:none;\">\n                                      <div  (click)=\"itemSelected()\">\n                                        <input class=\"hideInput\" type=\"radio\" [(ngModel)]=\"FormValues[DataElement.ID] \" name=\"FormValues['{{DataElement.ID}}']\" value={{choice.Value}}\n                                          checked>\n                                        <span>{{choice.Label}}</span>\n\n                                      </div>\n\n                            </label>\n                          </div> </div>\n                          </div>\n                        </ng-container>\n                      </ng-container>\n                    </ng-container>\n                  </div>\n                  <!-- imagemap will be displyed here -->\n                  <ng-container *ngIf=\"DataElement.ImagePath != undefined\">\n                    <div class=\"row\">\n                      <acr-image-map [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-image-map>\n                    </div>\n                  </ng-container>\n\n\n                </ng-container>\n                <!--Multi Choice DataElements-->\n                <ng-container *ngIf=\"DataElement.ElementType == 'MultiChoiceDataElement' \">\n                  <ng-container *ngFor=\"let choice of DataElement.ChoiceOptions\">\n                    <div class=\"checkbox\">\n                      <label >\n                        <input type=\"checkbox\" value={{choice.Value}} (change)=\"updateMultichoice(DataElement.ID,choice.Value,$event)\">\n                        <span> {{choice.Label}}</span>\n                      </label>\n                    </div>\n                  </ng-container>\n                </ng-container>\n\n                <!--NumericDataElement-->\n                <ng-container *ngIf=\"DataElement.ElementType == 'NumericDataElement' \">\n                  <input type=\"number\" [(ngModel)]=\"FormValues[DataElement.ID]\" class=\"form-control\" name=\"FormValues['{{DataElement.ID}}']\"\n                    (keypress)=\"itemSelected()\">\n                </ng-container>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  ","styles":["\n    .content-padding {\n      padding-top: 5px;\n      padding-right: 5px;\n    }\n  "]}]}],"members":{"DataElements":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"FormValues":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"ValidationBlocks":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵd"}]}],"itemSelected":[{"__symbolic":"method"}],"evaluate":[{"__symbolic":"method"}],"updateMultichoice":[{"__symbolic":"method"}]}},"ɵh":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acr-expresssion-block","template":"\n\n\n        <ng-container *ngIf=\"!validate(ExpBlock.ValidationCondition)\">\n\n             <ng-container *ngIf=\"evaluate(ExpBlock.Condition, ExpBlock.NotRelavantDataElements)\">\n              <ng-container *ngIf=\"(ExpBlock.Result != undefined)\">\n              <acr-expression-result [DataElements]=\"DataElements\" [ExpBlock]=\"ExpBlock\" [Result]=\"ExpBlock.Result\" [FormValues]=\"FormValues\"></acr-expression-result>\n             </ng-container>\n\n            <ng-container *ngIf=\"ExpBlock.NestedBlocks.length > 0\">\n              <ng-container *ngFor=\"let NestedBlock of ExpBlock.NestedBlocks\">\n                    <acr-expresssion-block [ExpBlock]=\"NestedBlock\" [FormValues]=\"FormValues\" [DataElements]=\"DataElements\" ></acr-expresssion-block>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n\n          <ng-container *ngIf=\"ExpBlock.ElseBlocks.length > 0\">\n            <ng-container *ngIf=\"!evaluate(ExpBlock.Condition,ExpBlock.NotRelavantDataElements)\">\n              <ng-container *ngFor=\"let ElseBlock of ExpBlock.ElseBlocks\">\n               <acr-expresssion-block [ExpBlock]=\"ElseBlock\" [FormValues]=\"FormValues\" [DataElements]=\"DataElements\"> </acr-expresssion-block>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n  ","styles":["\n\n  "]}]}],"members":{"FormValues":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"ExpBlock":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"DataElements":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"onExpressionChanged":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵb"}]}],"validate":[{"__symbolic":"method"}],"evaluate":[{"__symbolic":"method"}]}},"ɵi":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acr-value-block","template":"\n    <ng-container *ngIf=\"!validate(ValueBlock.ValidationCondition)\">\n      <ng-container *ngIf=\"evaluate(ValueBlock.Condition)\">\n          <ng-container *ngIf=\"ValueBlock.ArithmeticExpression !=''\">\n              <ng-container *ngIf=\"DataElement.ShowValue\">\n                  <label class=\"control-label DEElement\">  {{compute(ValueBlock.ArithmeticExpression)}}</label>\n              </ng-container>\n              <ng-container *ngIf=\"!DataElement.ShowValue\">\n                  <input type=\"hidden\"   [attr.value]=\"compute(ValueBlock.ArithmeticExpression)\" />\n              </ng-container>\n          </ng-container>\n          <ng-container *ngIf=\"ValueBlock.TextExpression !== '' && ValueBlock.TextExpression !=undefined \">\n              <ng-container *ngIf=\"DataElement.ShowValue\">\n                  <label class=\"control-label DEElement\">  {{textify(ValueBlock.TextExpression)}}</label>\n              </ng-container>\n              <ng-container *ngIf=\"!DataElement.ShowValue\">\n                  <input type=\"hidden\"   [attr.value]=\"textify(ValueBlock.TextExpression)\" />\n              </ng-container>\n          </ng-container>\n          <ng-container *ngIf=\"ValueBlock.NestedBlocks.length > 0\">\n              <ng-container *ngFor=\"let NestedBlock of ValueBlock.NestedBlocks\">\n                  <acr-value-block [ValueBlock]=\"NestedBlock\" [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-value-block>\n              </ng-container>\n          </ng-container>\n      </ng-container>\n\n      <ng-container *ngIf=\"ValueBlock.ElseBlocks.length > 0\">\n          <ng-container *ngIf=\"!evaluate(ValueBlock.Condition)\">\n              <ng-container *ngFor=\"let ElseBlock of ValueBlock.ElseBlocks\">\n                  <acr-value-block [ValueBlock]=\"ElseBlock\" [DataElement]=\"DataElement\" [DataElements]=\"DataElements\" [FormValues]=\"FormValues\"></acr-value-block>\n              </ng-container>\n          </ng-container>\n      </ng-container>\n    </ng-container>\n  ","styles":["\n\n  "]}]}],"members":{"ValueBlock":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"DataElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"DataElements":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"FormValues":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵb"}]}],"evaluate":[{"__symbolic":"method"}],"validate":[{"__symbolic":"method"}],"compute":[{"__symbolic":"method"}],"textify":[{"__symbolic":"method"}]}},"ɵj":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acr-expression-result","template":"\n    <div class=\"panel panel-default\">\n\n      <div class=\"panel-heading text-left\">\n        Report Text: <select id=\"ddlSections\" (change)=\"generateReportText()\" [(ngModel)]=\"selectedSection\">\n          <ng-container *ngFor=\"let Section of Result.ReportSections\">\n            <option [value]=\"Section.Heading\" [selected]=\"Section.Heading == 'findings'\">{{Section.Heading}}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n    <div>\n      <ng-container *ngFor=\"let Section of Result.ReportSections\">\n        <ng-container *ngIf=\"selectedSection == Section.Heading\">\n          <acr-report-text [ReportTexts]=\"Section.ReportTexts\" [FormValues]=\"FormValues\"></acr-report-text>\n        </ng-container>\n      </ng-container>\n    </div>\n  ","styles":["\n\n  "]}]}],"members":{"ExpBlock":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"Result":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"FormValues":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"DataElements":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"ngOnInit":[{"__symbolic":"method"}],"getResultText":[{"__symbolic":"method"}],"generateSectionResult":[{"__symbolic":"method"}],"textifyReportText":[{"__symbolic":"method"}],"evaluate":[{"__symbolic":"method"}]}},"ɵk":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acr-report-text","template":"\n    <ng-container *ngFor=\"let ReportText of ReportTexts\">\n      <ng-container *ngIf=\"ReportText.ResultText != ''\">\n        <div >\n          <label> {{ReportText.ResultText}} </label>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"ReportText.DataElementID != ''\">\n        <div >\n          <label> {{InsertValue(ReportText.DataElementID)}} </label>\n        </div>\n        <br/>\n      </ng-container>\n\n      <ng-container *ngIf=\"ReportText.Condition != ''\">\n        <ng-container *ngIf=\"evaluate(ReportText.Condition)\">\n          <acr-report-text [ReportTexts]=\"ReportText.NestedReportText\" [FormValues]=\"FormValues\"></acr-report-text>\n        </ng-container>\n      </ng-container>\n\n      <ng-container *ngIf=\"ReportText.Condition == ''\">\n        <acr-report-text [ReportTexts]=\"ReportText.NestedReportText\" [FormValues]=\"FormValues\"></acr-report-text>\n      </ng-container>\n    </ng-container>\n  ","styles":["\n\n  "]}]}],"members":{"FormValues":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"ReportTexts":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"evaluate":[{"__symbolic":"method"}],"InsertValue":[{"__symbolic":"method"}]}},"ɵl":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable"}}],"members":{}},"ɵm":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"acr-file-upload-loader","template":"\n    <div class = \"row\">\n      <div class= \"col-sm-12\">\n          <div class=\"panel panel-default\">\n              <div class=\"panel-heading\">Select  the Template file</div>\n              <div class=\"panel-body\">\n                  <div class=\"row\">\n                        <div class=\"col-sm-6\"> Select the file to be uploaded</div>\n                        <div class=\"col-sm-6\"><input type=\"file\" accept=\".xml\" (change)=\"changeListener($event)\"></div>\n                  </div>\n              </div>\n            </div>\n      </div>\n    </div>\n  ","styles":["\n\n  "]}]}],"members":{"onFileContentRead":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output"}}]}],"changeListener":[{"__symbolic":"method"}],"readThis":[{"__symbolic":"method"}]}}},"origins":{"SimulatorModule":"./src/app/modules/simulator/simulator.module","SimulatorLoaderModule":"./src/app/modules/simulatorloader/simulatorloader.module","ɵa":"./src/app/modules/simulator/assist-simulator/assist-simulator.component","ɵb":"./src/app/modules/simulator/shared/services/globals.service","ɵc":"./src/app/modules/simulator/computed-element/computed-element.component","ɵd":"./src/app/modules/simulator/shared/services/string-utility.service","ɵe":"./src/app/modules/simulator/hint-diagram/hint-diagram.component","ɵf":"./src/app/modules/simulator/image-map/image-map.component","ɵg":"./src/app/modules/simulator/data-element/data-element.component","ɵh":"./src/app/modules/simulator/expresssion-block/expresssion-block.component","ɵi":"./src/app/modules/simulator/value-block/value-block.component","ɵj":"./src/app/modules/simulator/expression-result/expression-result.component","ɵk":"./src/app/modules/simulator/report-text/report-text.component","ɵl":"./src/app/modules/simulator/shared/services/settings.service","ɵm":"./src/app/modules/simulatorloader/file-upload-loader/file-upload-loader.component"},"importAs":"Simulator"}