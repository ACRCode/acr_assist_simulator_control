
import { Injectable } from "@angular/core";
import { TemplateManagerService } from "./template-manager.service";
import { SimulatorEngineService } from "../../../core/services/simulator-engine.service";
declare var decode: any;

@Injectable()
export class VendorValidationService {
    constructor(private templateManagerService: TemplateManagerService,
        private simulatorEngineService: SimulatorEngineService) {
    }

    execute() {
        debugger;
        const base64String = 'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPD94bWwtbW9kZWwgaHJlZj0iLi4vLi4vLi4vWE1MIFNjaGVtYS9BQ1JBc3Npc3RfeG1sX3NjaGVtYS5ybmMiIHR5cGU9ImFwcGxpY2F0aW9uL3JlbGF4LW5nLWNvbXBhY3Qtc3ludGF4Ij8+CjxSZXBvcnRpbmdNb2R1bGU+CQogICAgPE1ldGFkYXRhPiAgIAogICAgICAgIDxMYWJlbD5IZWxsbyBBc3Npc3Q8L0xhYmVsPgogICAgICAgIDxJRD5IZWxsb19Bc3Npc3RfMV8wPC9JRD4KICAgICAgICA8U2NoZW1hVmVyc2lvbj4yLjA8L1NjaGVtYVZlcnNpb24+CiAgICAgICAgPE1vZHVsZVZlcnNpb24+MS41PC9Nb2R1bGVWZXJzaW9uPgogICAgCTxDcmVhdGVkRGF0ZT4yMDE4LTEyLTMxPC9DcmVhdGVkRGF0ZT4KICAgIAk8TGFzdE1vZGlmaWVkRGF0ZT4yMDE4LTExLTI2PC9MYXN0TW9kaWZpZWREYXRlPgoJCTxBcHByb3ZlZEJ5PkFtZXJpY2FuIENvbGxlZ2Ugb2YgUmFkaW9sb2d5PC9BcHByb3ZlZEJ5PgoJCTxSZXZpZXdlZEJ5PkFtZXJpY2FuIENvbGxlZ2Ugb2YgUmFkaW9sb2d5PC9SZXZpZXdlZEJ5PgoJCTxEZXZlbG9wZWRCeT5BbWVyaWNhbiBDb2xsZWdlIG9mIFJhZGlvbG9neTwvRGV2ZWxvcGVkQnk+CQkKICAgICAgICA8SW5mbz4KICAgICAgICAgICAgPERlc2NyaXB0aW9uPlRoaXMgaXMgYSBzYW1wbGUgeG1sIGZvciBBQ1IgQXNzaXN0IGJhc2VkIG9uIExJLVJBRFMgKGNoYXJhY3Rlcml6aW5nIGxpdmVyIGxlc2lvbiBmb3IgTVJJKTwvRGVzY3JpcHRpb24+CiAgICAgICAgICAgIDxSZWZlcmVuY2VzPiAgICAgICAgICAKICAgICAgICAgICAgICAgIDxDaXRhdGlvbiBVcmw9Imh0dHBzOi8vbnJkci5hY3Iub3JnL2xpcmFkcy8iPgogICAgICAgICAgICAgICAgQUNSIExJLVJBRFM8L0NpdGF0aW9uPgogICAgICAgICAgICAgICAgPENpdGF0aW9uIFVybD0iaHR0cHM6Ly93d3cuYWNyLm9yZy9QcmFjdGljZS1NYW5hZ2VtZW50LVF1YWxpdHktSW5mb3JtYXRpY3MvSW5mb3JtYXRpY3MvU3RydWN0dXJlZC1Db250ZW50Ij4KICAgICAgICAgICAgICAgIEFDUiBBc3Npc3Q8L0NpdGF0aW9uPgogICAgICAgICAgICA8L1JlZmVyZW5jZXM+CiAgICAgICAgICAgIDxEaWFncmFtcz4gIAogICAgICAgICAgICAgICAgPERpYWdyYW0gRGlzcGxheVNlcXVlbmNlPSIxIiBJc0tleURpYWdyYW09InRydWUiPgogICAgICAgICAgICAgICAgCTxMb2NhdGlvbj5MSVJBRFMucG5nPC9Mb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8TGFiZWw+QUNSIEhlbGxvIEFzc2lzdDwvTGFiZWw+ICAKICAgICAgICAgICAgICAgIDwvRGlhZ3JhbT4KICAgICAgICAgICAgPC9EaWFncmFtcz4KICAgICAgICAgICAgPENvbnRhY3Q+CiAgICAgICAgICAgICAgICA8TmFtZT5BQ1IgQXNzaXN0PC9OYW1lPgogICAgICAgICAgICAJPEVtYWlsPmFjci1hc3Npc3RAYWNyLm9yZzwvRW1haWw+CiAgICAgICAgICAgICAgICA8SW5zdGl0dXRpb24+QW1lcmljYW4gQ29sbGVnZSBvZiBSYWRpb2xvZ3k8L0luc3RpdHV0aW9uPgogICAgICAgICAgICA8L0NvbnRhY3Q+CiAgICAgICAgPC9JbmZvPgogICAgICAgIDxSZXBvcnRDaXRhdGlvblRleHQvPgogICAgICAgIDxPbnRvbG9neT4KICAgICAgICAgICAgPEFuYXRvbWljUmVnaW9ucyBDb2RpbmdTeXN0ZW09Imh0dHA6Ly9yYWRlbGVtZW50Lm9yZy8iPgogICAgICAgICAgICAgICAgPFJlZ2lvbiBDb2RlPSJSSUQ1OCI+PC9SZWdpb24+CiAgICAgICAgICAgIDwvQW5hdG9taWNSZWdpb25zPgogICAgICAgICAgICA8UG9zc2libGVEaWFnbm9zZXM+CiAgICAgICAgICAgICAgICA8RGlhZ25vc2lzIENvZGU9IlJJRDQyNzEiPkhlcGF0b2NlbGx1bGFyIGNhcmNpbm9tYTwvRGlhZ25vc2lzPgogICAgICAgICAgICA8L1Bvc3NpYmxlRGlhZ25vc2VzPgogICAgICAgIDwvT250b2xvZ3k+CiAgICAgICAgPEFwcGxpY2FibGVFeGFtcz4KCSAgICA8QXBwbGljYWJsZUV4YW1DYXRlZ29yeSBBeGlzPSJNb2RhbGl0eSI+TVJJIDwvQXBwbGljYWJsZUV4YW1DYXRlZ29yeT4KCSAgICA8QXBwbGljYWJsZUV4YW1DYXRlZ29yeSBBeGlzPSJBbmF0b215Ij4gTEl2ZXIgPC9BcHBsaWNhYmxlRXhhbUNhdGVnb3J5PgogICAgICAgICAgIAogICAgICAgIDwvQXBwbGljYWJsZUV4YW1zPgogICAgICAgIDxBcHBsaWNhYmxlU2V4ZXMgVmFsdWU9IkJvdGgiPjwvQXBwbGljYWJsZVNleGVzPgogICAgICAgIDxBcHBsaWNhYmxlQWdlR3JvdXBzPgogICAgICAgICAgICA8TWluaW11bUFnZT4xPC9NaW5pbXVtQWdlPgogICAgICAgIDwvQXBwbGljYWJsZUFnZUdyb3Vwcz4KICAgICAgICA8VGV4dEN1ZXM+CiAgICAgICAgICAgIDxDb250ZXh0UGhyYXNlcz4KICAgICAgICAgICAgICAgIDxDb250ZXh0UGhyYXNlPjwvQ29udGV4dFBocmFzZT4KICAgICAgICAgICAgPC9Db250ZXh0UGhyYXNlcz4KICAgICAgICAgICAgPEtleVdvcmRzPgogICAgICAgICAgICAgICAgPEtleVdvcmQ+TElSQURTIExpdmVyIGxlc2lvbjwvS2V5V29yZD4gIAogICAgICAgICAgICA8L0tleVdvcmRzPgogICAgICAgICAgICA8TmVnYXRpb25QaHJhc2VzPgogICAgICAgICAgICAgICAgPE5lZ2F0aW9uUGhyYXNlPjwvTmVnYXRpb25QaHJhc2U+' +
                '' +
                'MYWJlbD48L0xhYmVsPgogICAgCQkJPC9EaWFncmFtPgogICAgCQk8L0RpYWdyYW1zPgogICAgCTwhLS0JPE1pbmltdW0+MTA8L01pbmltdW0+CiAgICAJCTxNYXhpbXVtPjEyPC9NYXhpbXVtPi0tPgoJCQk8Q29uZGl0aW9uYWxQcm9wZXJ0aWVzPgkJCQkKCQkJCTxDb25kaXRpb25hbFByb3BlcnR5PgoJCQkJCTxPckNvbmRpdGlvbj4KCQkJCQkgICAgPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Ik9ic2VydmF0aW9uQ2hhcmFjdGVyIiAKCQkJCQkJCUNvbXBhcmlzb25WYWx1ZT0iZGVmaW5pdGVseUJlbmlnbiIvPgoJCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiCgkJCQkJCQlDb21wYXJpc29uVmFsdWU9InRyZWF0ZWRPYnNlcnZhdGlvbiIvPgkJCQkJCQoJCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiCgkJCQkJCQlDb21wYXJpc29uVmFsdWU9InByb2JhYmx5QmVuaWduIi8+CgkJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIKCQkJCQkJCUNvbXBhcmlzb25WYWx1ZT0ibm90c3BlY2lmaWNmb3JMUiIvPgoJCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiCgkJCQkJCQlDb21wYXJpc29uVmFsdWU9InR1bW9ySW5WZWluIi8+CgkJCQkJPC9PckNvbmRpdGlvbj4KCQkJCQk8SXNSZWxldmFudD5mYWxzZTwvSXNSZWxldmFudD4KCQkJCTwvQ29uZGl0aW9uYWxQcm9wZXJ0eT4KCQkJPC9Db25kaXRpb25hbFByb3BlcnRpZXM+CQogICAgCTwvTnVtZXJpY0RhdGFFbGVtZW50PgogICAgICAgIAogICAgCTxDaG9pY2VEYXRhRWxlbWVudCBJZD0id2FzaG91dCIgSXNSZXF1aXJlZD0idHJ1ZSIgRGlzcGxheVNlcXVlbmNlPSI0IiBFZGl0YWJsZT0idHJ1ZSIgSGFzcHJlZmlsbGVkPSJmYWxzZSIgT3V0cHV0PSJmYWxzZSI+CiAgICAgICAgICAgIDxDb2RhYmxlQ29uY2VwdCBOYW1lPSJ3YXNob3V0Ij4KICAgIAkJCTxDb2Rpbmc+CiAgICAJCQkJPFN5c3RlbSBWYWx1ZT0iUmFkRWxlbWVudCI+PC9TeXN0ZW0+CiAgICAJCQkJPFZlcnNpb24gVmFsdWU9IjEuMCI+PC9WZXJzaW9uPgogICAgCQkJCTxDb2RlIFZhbHVlPSJSREU4NSI+PC9Db2RlPgogICAgCQkJCTxEaXNwbGF5IFZhbHVlPSJSREU4NSI+PC9EaXNwbGF5PgogICAgCQkJCTxVc2VyU2VsZWN0ZWQgVmFsdWU9InRydWUiPjwvVXNlclNlbGVjdGVkPgogICAgCQkJPC9Db2Rpbmc+ICAgIAkJCQogICAgCQk8L0NvZGFibGVDb25jZXB0PgoJCQk8TGFiZWw+V2FzaG91dDwvTGFiZWw+CiAgICAJCTxIaW50PlZpc3VhbGx5IGFzc2Vzc2VkIHRlbXBvcmFsIHJlZHVjdGlvbiBpbiBlbmhhbmNlbWVudCByZWxhdGl2ZSB0byBsaXZlciBmcm9tIGFuIGVhcmxpZXIgdG8gYSBsYXRlciBwaGFzZSByZXN1bHRpbmcgaW4gcG9ydGFsIHZlbm91cyBwaGFzZSBoeXBvZW5oYW5jZW1lbnQgb3IgZGVsYXllZCBwaGFzZSBoeXBvZW5oYW5jZW1lbnQuPC9IaW50PgogICAgICAgICAgICA8Q2hvaWNlSW5mbz4KCQkJICAgPENob2ljZT4KCQkJCSAgPFZhbHVlPnllczwvVmFsdWU+CgkJCQkgIDxMYWJlbD5ZZXM8L0xhYmVsPgoJCQkgICA8L0Nob2ljZT4KCQkJICAgPENob2ljZT4KCQkJCSAgPFZhbHVlPm5vPC9WYWx1ZT4KCQkJCSAgPExhYmVsPk5vPC9MYWJlbD4KCQkJICAgPC9DaG9pY2U+CgkJCTwvQ2hvaWNlSW5mbz4KICAgICAgICAgICAgPEltYWdlTWFwPgogICAgICAgICAgICAJPExvY2F0aW9uPndhc2hvdXRJbWFnZXMucG5nPC9Mb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxNYXA+CiAgICAgICAgICAgICAgICAgICAgIDxBcmVhIFNoYXBlPSJyZWN0IiBDb29yZHM9IjAsNDYyLDgwMCw2MjMiIENob2ljZVZhbHVlPSJubyIvPgogICAgICAgICAgICAgICAgICAgIDxBcmVhIFNoYXBlPSJyZWN0IiBDb29yZHM9IjAsMCw3OTksNDYzIiBDaG9pY2VWYWx1ZT0ieWVzIi8+CiAgICAgICAgICAgICAgICA8L01hcD4KICAgICAgICAgICAgPC9JbWFnZU1hcD4KICAgIAkJPENvbmRpdGlvbmFsUHJvcGVydGllcz4KICAgIAkJCTxDb25kaXRpb25hbFByb3BlcnR5PgoJCQkJCTxPckNvbmRpdGlvbj4KCQkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Ik9ic2VydmF0aW9uQ2hhcmFjdGVyIgoJCQkJCQkJQ29tcGFyaXNvblZhbHVlPSJ0cmVhdGVkT2JzZXJ2YXRpb24iLz4KCQkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Ik9ic2VydmF0aW9uQ2hhcmFjdGVyIgoJCQkJCQkJQ29tcGFyaXNvblZhbHVlPSJkZWZpbml0ZWx5QmVuaWduIi8+CgkJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIKCQkJCQkJCUNvbXBhcmlzb25WYWx1ZT0icHJvYmFibHlCZW5pZ24iLz4KCQkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Ik9ic2VydmF0aW9uQ2hhcmFjdGVyIgoJCQkJCQkJQ29tcGFyaXNvblZhbHVlPSJub3RzcGVjaWZpY2ZvckxSIi8+CgkJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIKCQkJCQkJCUNvbXBhcmlzb25WYWx1ZT0idHVtb3JJblZlaW4iLz4KCQkJCQk8L09yQ29uZGl0aW9uPgogICAgCQkJCTxJc1JlbGV2YW50PmZhbHNlPC9Jc1JlbGV2YW50PiAgICAgICAgCQkJCQogICAgCQkJPC9Db25kaXRpb25hbFByb3BlcnR5PgkJCiAgICAJCTwvQ29uZGl0aW9uYWxQcm9wZXJ0aWVzPgkKICAgICAgICA8L0Nob2ljZURhdGFFbGVtZW50PgoJCSAgICAgICAKICAgIAk8Q2hvaWNlRGF0YUVsZW1lbnQgSWQ9ImNhcHN1bGUiIElzUmVxdWlyZWQ9InRydWUiIERpc3BsYXlTZXF1ZW5jZT0iNSI+CgkJIDxDb2RhYmxlQ29uY2VwdCBOYW1lPSJjYXBzdWxlIj4KICAgIAkJCTxDb2Rpbmc+CiAgICAJCQkJPFN5c3RlbSBWYWx1ZT0iUmFkRWxlbWVudCI+PC9TeXN0ZW0+CiAgICAJCQkJPFZlcnNpb24gVmFsdWU9IjEuMCI+PC9WZXJzaW9uPgogICAgCQkJCTxDb2RlIFZhbHVlPSJSREU4MyI+PC9Db2RlPgogICAgCQkJCTxEaXNwbGF5IFZhbHVlPSJSREU4MyI+PC9EaXNwbGF5PgogICAgCQkJCTxVc2VyU2VsZWN0ZWQgVmFsdWU9InRydWUiPjwvVXNlclNlbGVjdGVkPgogICAgCQkJPC9Db2Rpbmc+ICAgIAkJCQogICAgCQk8L0NvZGFibGVDb25jZXB0PgogICAgICAgICAgICA8TGFiZWw+Q2Fwc3VsZTwvTGFiZWw+CiAgICAJCTxIaW50PlBlcmlwaGVyYWwgcmltIG9mIHNtb290aCBoeXBlci1lbmhhbmNlbWVudCBpbiB0aGUgcG9ydGFsIHZlbm91cyBwaGFzZSBvciBkZWxheWVkIHBoYXNlIHRoYXQgdW5lcXVpdm9jYWxseSBpcyB0aGlja2VyIG9yIG1vcmUgY29uc3BpY3VvdXMgdGhhbiB0aGUgcmltcyBzdXJyb3VuZGluZyBiYWNrZ3JvdW5kIG5vZHVsZS48L0hpbnQ+CiAgICAgICAgICAgIDxDaG9pY2VJbmZvPgoJCQkgICA8Q2hvaWNlPgoJCQkJICA8VmFsdWU+eWVzPC9WYWx1ZT4KCQkJCSAgPExhYmVsPlllczwvTGFiZWw+CgkJCSAgIDwvQ2hvaWNlPgoJCQkgICA8Q2hvaWNlPgoJCQkJICA8VmFsdWU+bm88L1ZhbHVlPgoJCQkJICA8TGFiZWw+Tm88L0xhYmVsPgoJCQkgICA8L0Nob2ljZT4KCQkJPC9DaG9pY2VJbmZvPgogICAgICAgICAgICA8SW1hZ2VNYXA+CiAgICAgICAgICAgIAk8TG9jYXRpb24+Y2Fwc3VsZUltYWdlcy5wbmc8L0xvY2F0aW9uPgogICAgICAgICAgICAgICAgPE1hcD4KICAgICAgICAgICAgICAgICAgICAgPEFyZWEgU2hhcGU9InJlY3QiIENvb3Jkcz0iMCw0NjIsODAwLDYyMyIgQ2hvaWNlVmFsdWU9Im5vIi8+CiAgICAgICAgICAgICAgICAgICAgPEFyZWEgU2hhcGU9' +
                'InJlY3QiIENvb3Jkcz0iMCwwLDc5OSw0NjMiIENob2ljZVZhbHVlPSJ5ZXMiLz4KICAgICAgICAgICAgICAgIDwvTWFwPgogICAgICAgICAgICA8L0ltYWdlTWFwPgogICAgCQk8Q29uZGl0aW9uYWxQcm9wZXJ0aWVzPgogICAgCQkJPENvbmRpdGlvbmFsUHJvcGVydHk+CiAgICAJCQkJPE9yQ29uZGl0aW9uPgogICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0idHJlYXRlZE9ic2VydmF0aW9uIi8+CiAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIgQ29tcGFyaXNvblZhbHVlPSJkZWZpbml0ZWx5QmVuaWduIi8+CiAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIgQ29tcGFyaXNvblZhbHVlPSJwcm9iYWJseUJlbmlnbiIvPgogICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0ibm90c3BlY2lmaWNmb3JMUiIvPgogICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0idHVtb3JJblZlaW4iLz4gICAgCQkJCQkKICAgIAkJCQk8L09yQ29uZGl0aW9uPgogICAgCQkJCTxJc1JlbGV2YW50PmZhbHNlPC9Jc1JlbGV2YW50PiAgICAJICAgIAkJCQkKICAgIAkJCTwvQ29uZGl0aW9uYWxQcm9wZXJ0eT4JCQogICAgCQk8L0NvbmRpdGlvbmFsUHJvcGVydGllcz4JCiAgICAgICAgPC9DaG9pY2VEYXRhRWxlbWVudD4KICAgICAgICAKICAgIAk8Q2hvaWNlRGF0YUVsZW1lbnQgSWQ9InRocmVzaG9sZGdyb3d0aCIgSXNSZXF1aXJlZD0idHJ1ZSIgRGlzcGxheVNlcXVlbmNlPSI2IiBVbml0PSJtbSI+CgkJIDxDb2RhYmxlQ29uY2VwdCBOYW1lPSJ0aHJlc2hvbGRncm93dGgiPgogICAgCQkJPENvZGluZz4KICAgIAkJCQk8U3lzdGVtIFZhbHVlPSJSYWRFbGVtZW50Ij48L1N5c3RlbT4KICAgIAkJCQk8VmVyc2lvbiBWYWx1ZT0iMS4wIj48L1ZlcnNpb24+CiAgICAJCQkJPENvZGUgVmFsdWU9IlJERTg0Ij48L0NvZGU+CiAgICAJCQkJPERpc3BsYXkgVmFsdWU9IlJERTg0Ij48L0Rpc3BsYXk+CiAgICAJCQkJPFVzZXJTZWxlY3RlZCBWYWx1ZT0idHJ1ZSI+PC9Vc2VyU2VsZWN0ZWQ+CiAgICAJCQk8L0NvZGluZz4gICAgCQkJCiAgICAJCTwvQ29kYWJsZUNvbmNlcHQ+CiAgICAgICAgICAgIDxMYWJlbD5UaHJlc2hvbGQgR3Jvd3RoPC9MYWJlbD4KICAgIAkJPEhpbnQ+SW5jcmVhc2UgaW4gZGlhbWV0ZXIgb2YgYSBtYXNzIGNvbXBhcmVkIHRvIGl0cyBiYXNlbGluZSBieSBhIG1pbmltdW0gb2YgNSBtbSBBTkQgZGVwZW5kaW5nIG9uIHRoZSB0aW1lIGludGVydmFsIGJldHdlZW4gZXhhbWluYXRpb25zLCBieSB0aGUgZm9sbG93aW5nIGFtb3VudHM6IGxlc3MgdGhhbiBvciBlcXVhbCB0byA2IG1vbnRoczogPjUwJSBkaWFtZXRlciBpbmNyZWFzZSBncmVhdGVyIHRoYW4gNiBtb250aHM6ID4xMDAlIGRpYW1ldGVyIGluY3JlYXNlCiAgICAJCTwvSGludD4KICAgICAgICAgICAgPENob2ljZUluZm8+CgkJCSAgIDxDaG9pY2U+CgkJCQkgIDxWYWx1ZT55ZXM8L1ZhbHVlPgoJCQkJICA8TGFiZWw+WWVzPC9MYWJlbD4KCQkJICAgPC9DaG9pY2U+CgkJCSAgIDxDaG9pY2U+CgkJCQkgIDxWYWx1ZT5ubzwvVmFsdWU+CgkJCQkgIDxMYWJlbD5ObzwvTGFiZWw+CgkJCSAgIDwvQ2hvaWNlPgoJCQk8L0Nob2ljZUluZm8+CiAgICAgICAgICAgICA8SW1hZ2VNYXA+CiAgICAgICAgICAgICAJPExvY2F0aW9uPnRocmVzaG9sZEltYWdlcy5wbmc8L0xvY2F0aW9uPgogICAgICAgICAgICAgICAgPE1hcD4KICAgICAgICAgICAgICAgICAgICAgPEFyZWEgU2hhcGU9InJlY3QiIENvb3Jkcz0iMCw0NjIsODAwLDYyMyIgQ2hvaWNlVmFsdWU9Im5vIi8+CiAgICAgICAgICAgICAgICAgICAgPEFyZWEgU2hhcGU9InJlY3QiIENvb3Jkcz0iMCwwLDc5OSw0NjMiIENob2ljZVZhbHVlPSJ5ZXMiLz4KICAgICAgICAgICAgICAgIDwvTWFwPgogICAgICAgICAgICA8L0ltYWdlTWFwPgogICAgCQk8Q29uZGl0aW9uYWxQcm9wZXJ0aWVzPgogICAgCQkJPENvbmRpdGlvbmFsUHJvcGVydHk+CiAgICAJCQkJPE9yQ29uZGl0aW9uPgogICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0idHJlYXRlZE9ic2VydmF0aW9uIi8+CiAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIgQ29tcGFyaXNvblZhbHVlPSJkZWZpbml0ZWx5QmVuaWduIi8+CiAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIgQ29tcGFyaXNvblZhbHVlPSJwcm9iYWJseUJlbmlnbiIvPgogICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0ibm90c3BlY2lmaWNmb3JMUiIvPgogICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0idHVtb3JJblZlaW4iLz4gICAgCQkJCQkKICAgIAkJCQk8L09yQ29uZGl0aW9uPgogICAgCQkJCTxJc1JlbGV2YW50PmZhbHNlPC9Jc1JlbGV2YW50PiAgICAgICAgCQkJCQogICAgCQkJPC9Db25kaXRpb25hbFByb3BlcnR5PgkJCiAgICAJCTwvQ29uZGl0aW9uYWxQcm9wZXJ0aWVzPgogICAgICAgIDwvQ2hvaWNlRGF0YUVsZW1lbnQ+CiAgICA8L0RhdGFFbGVtZW50cz4gCgkKICAgIDxSdWxlcz4KICAgICAgICA8RGVjaXNpb25Qb2ludCBJZD0iT2JzZXJ2YXRpb25EcCI+CiAgICAgICAgCTxMYWJlbD4gT2JzZXJ2YXRpb24gaW4gaGlnaC1yaXNrIHBhdGllbnQgPC9MYWJlbD4KICAgICAgICAJCiAgICAgICAgCTxCcmFuY2g+CiAgICAgICAgCQk8TGFiZWw+VHJlYXRlZCBPYnNlcnZhdGlvbjwvTGFiZWw+CgkgICAgICAgIAk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0idHJlYXRlZE9ic2VydmF0aW9uIi8+CgkgICAgICAgIAk8RW5kUG9pbnRSZWYgRW5kUG9pbnRJZD0iTFJ0cmVhdGVkRXAiPjwvRW5kUG9pbnRSZWY+CiAgICAgICAgCTwvQnJhbmNoPgogICAgICAgIAkKICAgICAgICAJPEJyYW5jaD4KICAgICAgICAJCTxMYWJlbD5EZWZpbml0ZWx5IEJlbmlnbjwvTGFiZWw+ICAgICAgICAJCiAgICAgICAgCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJ'+
                'ZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0iZGVmaW5pdGVseUJlbmlnbiIvPgogICAgICAgIAkJPEVuZFBvaW50UmVmIEVuZFBvaW50SWQ9IkxSMUVwIj48L0VuZFBvaW50UmVmPgogICAgICAgIAk8L0JyYW5jaD4KICAgICAgICAJCiAgICAgICAgCTxCcmFuY2g+CiAgICAgICAgCQk8TGFiZWw+UHJvYmFibHkgQmVuaWduPC9MYWJlbD4gICAgICAgIAkJCiAgICAgICAgCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0icHJvYmFibHlCZW5pZ24iLz4KICAgICAgICAJCTxFbmRQb2ludFJlZiBFbmRQb2ludElkPSJMUjJFcCIvPgogICAgICAgIAk8L0JyYW5jaD4gIAogICAgICAgIAkKICAgICAgICAJPEJyYW5jaD4KICAgICAgICAJCTxMYWJlbD5Qcm9iYWJsZSBtYWxpZ25hbmN5LCBub3Qgc3BlY2lmaWMgZm9yIExSPC9MYWJlbD4gICAgICAgIAkJCiAgICAgICAgCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0ibm90c3BlY2lmaWNmb3JMUiIvPgogICAgICAgIAkJPEVuZFBvaW50UmVmIEVuZFBvaW50SWQ9IkxSbUVwIj48L0VuZFBvaW50UmVmPgogICAgICAgIAk8L0JyYW5jaD4gIAogICAgICAgIAkKICAgICAgICAJPEJyYW5jaD4KICAgICAgICAJCTxMYWJlbD5UdW1vciBpbiB2ZWluPC9MYWJlbD4gICAgICAgIAkJCiAgICAgICAgCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0idHVtb3JJblZlaW4iLz4KICAgICAgICAJCTxFbmRQb2ludFJlZiBFbmRQb2ludElkPSJMUjV2RXAiPjwvRW5kUG9pbnRSZWY+CiAgICAgICAgCTwvQnJhbmNoPiAgICAgICAKICAgICAgICAJCiAgICAgICAgCQogICAgICAgIAk8QnJhbmNoPgogICAgICAgIAkJPExhYmVsPk5laXRoZXIgZGVmaW5pdGUgbm9yIHByb2JhYmxlIGJlbmlnbjwvTGFiZWw+CiAgICAgICAgCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIgQ29tcGFyaXNvblZhbHVlPSJub3REZWZQcm9iQmVuaWduIi8+CiAgICAgICAgCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9IkFydGVyaWFsRW5oYW5jZW1lbnQiIENvbXBhcmlzb25WYWx1ZT0iaHlwZXJFbmhhbmNpbmciLz4KICAgICAgICAJCQk8TGVzc1RoYW5Db25kaXRpb24gRGF0YUVsZW1lbnRJZD0iZGlhbWV0ZXIiIENvbXBhcmlzb25WYWx1ZT0iRGlhbWV0ZXJTbWFsbCIvPgogICAgICAgIAkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ0aHJlc2hvbGRncm93dGgiIENvbXBhcmlzb25WYWx1ZT0ibm8iLz4KICAgICAgICAJCQk8L0FuZENvbmRpdGlvbj4gICAgICAgIAkJCQogICAgICAgIAkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQk8RW5kUG9pbnRSZWYgRW5kUG9pbnRJZD0iTFIzRXAiPjwvRW5kUG9pbnRSZWY+ICAgICAgICAJCQogICAgICAgIAk8L0JyYW5jaD4KICAgICAgICAJCiAgICAgICAgCTxCcmFuY2g+CiAgICAgICAgCQk8TGFiZWw+TmVpdGhlciBkZWZpbml0ZSBub3IgcHJvYmFibGUgYmVuaWduIChPbmUpPC9MYWJlbD4KICAgICAgICAJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Ik9ic2VydmF0aW9uQ2hhcmFjdGVyIiBDb21wYXJpc29uVmFsdWU9Im5vdERlZlByb2JCZW5pZ24iLz4KICAgICAgICAJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iQXJ0ZXJpYWxFbmhhbmNlbWVudCIgQ29tcGFyaXNvblZhbHVlPSJoeXBlckVuaGFuY2luZyIvPgogICAgICAgIAkJCTxMZXNzVGhhbkNvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJkaWFtZXRlciIgQ29tcGFyaXNvblZhbHVlPSJEaWFtZXRlclNtYWxsIi8+CiAgICAgICAgCQkJPE9yQ29uZGl0aW9uPgogICAgICAgIAkJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+ICA8IS0tIFdhc2hvdXQgPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9Im5vIi8+ICA8IS0tIENhcHN1bGUgPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ0aHJlc2hvbGRncm93dGgiIENvbXBhcmlzb25WYWx1ZT0ibm8iLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPiAgPCEtLSBUaHJlc2hvbGRncm93dGggPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJPC9PckNvbmRpdGlvbj4KICAgICAgICAJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJPEVuZFBvaW50UmVmIEVuZFBvaW50SWQ9IkxSNEVwIj48L0VuZFBvaW50UmVmPgogICAgICAgIAk8L0JyYW5jaD4KICAgICAgICAJCiAgICAgICAgCTxCcmFuY2g+CiAgICAgICAgCQk8TGFiZWw+TmVpdGhlciBkZWZpbml0ZSBub3IgcHJvYmFibGUgYmVuaWduIChUd28gb3IgTW9yZSk8L0xhYmVsPgogICAgICAgIAkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0ibm90RGVmUHJvYkJlbmlnbiIvPgogICAgICAgIAkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJBcnRlcmlhbEVuaGFuY2VtZW50IiBDb21wYXJpc29uVmFsdWU9Imh5cGVyRW5oYW5jaW5nIi8+CiAgICAgICAgCQkJPExlc3NUaGFuQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImRpYW1ldGVyIiBDb21wYXJpc29uVmFsdWU9IkRpYW1ldGVyU21hbGwiLz4KICAgICAgICAJCQk8T3JDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4gIDwhLS0gV2FzaG91dCA9IFllcywgQ2Fwc3VsZSA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9InllcyIvPiAgPCEtLSBXYXNob3V0ID0gWWVzLCBUaHJlc2hvbGRncm93dGggPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPiAgPCEtLSBDYXBzdWxlID0gWWVzLCBUaHJlc2hvbGRncm93dGggPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ0aHJlc2hvbGRncm93dGgiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+CiAgICAgICAgCQkJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+ICA8IS0tIFdhc2hvdXQgPSBZZXMsIENhcHN1bGUgPSBZZXMsIFRocmVzaG9sZGdyb3d0aCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJPC9PckNvbmRpdGlvbj4KICAgICAgICAJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJPEVuZFBvaW50UmVmIEVuZFBvaW50SWQ9IkxSNEVwIj48L0VuZFBvaW50UmVmPgogICAgICAgIAk8L0JyYW5jaD4KICAgICAgICAJCiAgICAgICAgCTxCcmFuY2g+CiAgICAgICAgCQk8TGFiZWw+SHlwZXItZW5oYW5jZW1lbnQgKDEwLTE5KTwvTGFiZWw+CiAgICAgICAgCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIgQ29tcGFyaXNvblZhbHVlPSJub3REZWZQcm9iQmVuaWduIi8+CiAgICAgICAgCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9IkFydGVyaWFsRW5oYW5jZW1lbnQiIENvbXBhcmlzb25WYWx1ZT0iaHlwZXJFbmhhbmNpbmciLz4KICAgICAgICAJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8R3JlYXRlclRoYW5PckVxdWFsc0NvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJkaWFtZXRlciIgQ29tcGFyaXNvblZhbHVlPSJEaWFtZXRlclNtYWxsIi8+CiAgICAgICAgCQkJCTxMZXNzVGhhbk9yRXF1YWxzQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImRpYW1ldGVyIiBDb21wYXJpc29uVmFsdWU9IjE5Ii8+CiAgICAgICAgCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJPEFuZENvbmRpdGlvbj4' +
                'KICAgICAgICAJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ibm8iLz4KICAgICAgICAJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImNhcHN1bGUiIENvbXBhcmlzb25WYWx1ZT0ibm8iLz4KICAgICAgICAJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCTwvQW5kQ29uZGl0aW9uPiAgICAgICAgCQkJCiAgICAgICAgCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCTxFbmRQb2ludFJlZiBFbmRQb2ludElkPSJMUjNFcCI+PC9FbmRQb2ludFJlZj4KICAgICAgICAJPC9CcmFuY2g+CiAgICAgICAgCQogICAgICAgIAk8QnJhbmNoPgogICAgICAgIAkJPExhYmVsPkh5cGVyLWVuaGFuY2VtZW50IChXYXNob3V0L0NhcHN1bGUvVGhyZXNob2xkZ3Jvd3RoKTwvTGFiZWw+CiAgICAgICAgCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIgQ29tcGFyaXNvblZhbHVlPSJub3REZWZQcm9iQmVuaWduIi8+CiAgICAgICAgCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9IkFydGVyaWFsRW5oYW5jZW1lbnQiIENvbXBhcmlzb25WYWx1ZT0iaHlwZXJFbmhhbmNpbmciLz4KICAgICAgICAJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8R3JlYXRlclRoYW5PckVxdWFsc0NvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJkaWFtZXRlciIgQ29tcGFyaXNvblZhbHVlPSJEaWFtZXRlclNtYWxsIi8+CiAgICAgICAgCQkJCTxMZXNzVGhhbk9yRXF1YWxzQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImRpYW1ldGVyIiBDb21wYXJpc29uVmFsdWU9IjE5Ii8+CiAgICAgICAgCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJPE9yQ29uZGl0aW9uPgogICAgICAgIAkJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+ICA8IS0tIFdhc2hvdXQgPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9Im5vIi8+ICA8IS0tIENhcHN1bGUgPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ0aHJlc2hvbGRncm93dGgiIENvbXBhcmlzb25WYWx1ZT0ibm8iLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPiAgPCEtLSBUaHJlc2hvbGRncm93dGggPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJPC9PckNvbmRpdGlvbj4gICAgIAkJCQogICAgICAgIAkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQk8RW5kUG9pbnRSZWYgRW5kUG9pbnRJZD0iTFI0XzUiPjwvRW5kUG9pbnRSZWY+CiAgICAgICAgCTwvQnJhbmNoPgogICAgICAgIAkKICAgICAgICAJPEJyYW5jaD4KICAgICAgICAJCTxMYWJlbD5IeXBlci1lbmhhbmNlbWVudCAoVHdvIG9yIE1vcmUpPC9MYWJlbD4KICAgICAgICAJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Ik9ic2VydmF0aW9uQ2hhcmFjdGVyIiBDb21wYXJpc29uVmFsdWU9Im5vdERlZlByb2JCZW5pZ24iLz4KICAgICAgICAJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iQXJ0ZXJpYWxFbmhhbmNlbWVudCIgQ29tcGFyaXNvblZhbHVlPSJoeXBlckVuaGFuY2luZyIvPgogICAgICAgIAkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxHcmVhdGVyVGhhbk9yRXF1YWxzQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImRpYW1ldGVyIiBDb21wYXJpc29uVmFsdWU9IkRpYW1ldGVyU21hbGwiLz4KICAgICAgICAJCQkJPExlc3NUaGFuT3JFcXVhbHNDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iZGlhbWV0ZXIiIENvbXBhcmlzb25WYWx1ZT0iMTkiLz4KICAgICAgICAJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQk8T3JDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4gIDwhLS0gV2FzaG91dCA9IFllcywgQ2Fwc3VsZSA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9InllcyIvPiAgPCEtLSBXYXNob3V0ID0gWWVzLCBUaHJlc2hvbGRncm93dGggPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPiAgPCEtLSBDYXBzdWxlID0gWWVzLCBUaHJlc2hvbGRncm93dGggPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ0aHJlc2hvbGRncm93dGgiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+CiAgICAgICAgCQkJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+ICA8IS0tIFdhc2hvdXQgPSBZZXMsIENhcHN1bGUgPSBZZXMsIFRocmVzaG9sZGdyb3d0aCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJPC9PckNvbmRpdGlvbj4JCQkKICAgICAgICAJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJPEVuZFBvaW50UmVmIEVuZFBvaW50SWQ9IkxSNUVwIj48L0VuZFBvaW50UmVmPgogICAgICAgIAk8L0JyYW5jaD4KICAgICAgICAJCiAgICAgICAgCQogICAgICAgIAk8QnJhbmNoPgogICAgICAgIAkJPExhYmVsPkh5cGVyLWVuaGFuY2VtZW50IChMZXNzIHRoYW4gMjApPC9MYWJlbD4KICAgICAgICAJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Ik9ic2VydmF0aW9uQ2hhcmFjdGVyIiBDb21wYXJpc29uVmFsdWU9Im5vdERlZlByb2JCZW5pZ24iLz4KICAgICAgICAJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iQXJ0ZXJpYWxFbmhhbmNlbWVudCIgQ29tcGFyaXNvblZhbHVlPSJoeXBlckVuaGFuY2luZyIvPgogICAgICAgIAkJCTxHcmVhdGVyVGhhbk9yRXF1YWxzQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImRpYW1ldGVyIiBDb21wYXJpc29uVmFsdWU9IkRpYW1ldGVyTGFyZ2UiLz4KICAgICAgICAJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCTxFbmRQb2ludFJlZiBFbmRQb2ludElkPSJMUjRFcCI+PC9FbmRQb2ludFJlZj4KICAgICAgICAJPC9CcmFuY2g+CiAgICAgICAgCQogICAgICAgIAk8QnJhbmNoPgogICAgICAgIAkJPExhYmVsPkh5cGVyLWVuaGFuY2VtZW50IChPbmUpPC9MYWJlbD4KICAgICAgICAJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Ik9ic2VydmF0aW9uQ2hhcmFjdGVyIiBDb21wYXJpc29uVmFsdWU9Im5vdERlZlByb2JCZW5pZ24iLz4KICAgICAgICAJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iQXJ0ZXJpYWxFbmhhbmNlbWVudCIgQ29tcGFyaXNvblZhbHVlPSJoeXBlckVuaGFuY2luZyIvPgogICAgICAgIAkJCTxHcmVhdGVyVGhhbk9yRXF1YWxzQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImRpYW1ldGVyIiBDb21wYXJpc29uVmFsdWU9IkRpYW1ldGVyTGFyZ2UiLz4KICAgICAgICAJCQk8T3JDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4gIDwhLS0gV2FzaG91dCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ibm8iLz4gIDwhLS0gQ2Fwc3VsZSA9IFllcyAtLT4KIC' +
                'AgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9Im5vIi8+ICA8IS0tIFRocmVzaG9sZGdyb3d0aCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQk8L09yQ29uZGl0aW9uPgogICAgICAgIAkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQk8RW5kUG9pbnRSZWYgRW5kUG9pbnRJZD0iTFI1RXAiPjwvRW5kUG9pbnRSZWY+CiAgICAgICAgCTwvQnJhbmNoPgogICAgICAgIAkKICAgICAgICAJCiAgICAgICAgCTxCcmFuY2g+CiAgICAgICAgCQk8TGFiZWw+SHlwZXItZW5oYW5jZW1lbnQgKFdhc2hvdXQvQ2Fwc3VsZS9UaHJlc2hvbGRncm93dGggLSBUd28gb3IgTW9yZSk8L0xhYmVsPgogICAgICAgIAkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0ibm90RGVmUHJvYkJlbmlnbiIvPgogICAgICAgIAkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJBcnRlcmlhbEVuaGFuY2VtZW50IiBDb21wYXJpc29uVmFsdWU9Imh5cGVyRW5oYW5jaW5nIi8+CiAgICAgICAgCQkJPEdyZWF0ZXJUaGFuT3JFcXVhbHNDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iZGlhbWV0ZXIiIENvbXBhcmlzb25WYWx1ZT0iRGlhbWV0ZXJMYXJnZSIvPgogICAgICAgIAkJCTxPckNvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9InllcyIvPiAgPCEtLSBXYXNob3V0ID0gWWVzLCBDYXBzdWxlID0gWWVzIC0tPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImNhcHN1bGUiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+ICA8IS0tIFdhc2hvdXQgPSBZZXMsIFRocmVzaG9sZGdyb3d0aCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9Im5vIi8+ICA8IS0tIENhcHN1bGUgPSBZZXMsIFRocmVzaG9sZGdyb3d0aCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4gIDwhLS0gV2FzaG91dCA9IFllcywgQ2Fwc3VsZSA9IFllcywgVGhyZXNob2xkZ3Jvd3RoID0gWWVzIC0tPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImNhcHN1bGUiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQk8L09yQ29uZGl0aW9uPgogICAgICAgIAkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQk8RW5kUG9pbnRSZWYgRW5kUG9pbnRJZD0iTFI1RXAiPjwvRW5kUG9pbnRSZWY+CiAgICAgICAgCTwvQnJhbmNoPgogICAgICAgIAkKICAgICAgICAJPEJyYW5jaD4KICAgICAgICAJCTxMYWJlbD5IeXBvL0lzby1lbmhhbmNpbmcgLSBEaWFtZXRlcjwvTGFiZWw+IAogICAgICAgIAkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0ibm90RGVmUHJvYkJlbmlnbiIvPgogICAgICAgIAkJCTxMZXNzVGhhbkNvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJkaWFtZXRlciIgQ29tcGFyaXNvblZhbHVlPSJEaWFtZXRlckxhcmdlIi8+CgkgICAgICAgIAkJPE9yQ29uZGl0aW9uPgoJICAgICAgICAJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iQXJ0ZXJpYWxFbmhhbmNlbWVudCIgQ29tcGFyaXNvblZhbHVlPSJoeXBvRW5oYW5jaW5nIi8+CgkgICAgICAgIAkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJBcnRlcmlhbEVuaGFuY2VtZW50IiBDb21wYXJpc29uVmFsdWU9Imlzb0VuaGFuY2luZyIvPgoJICAgICAgICAJCTwvT3JDb25kaXRpb24+ICAgICAgICAJCQkKICAgICAgICAJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCTxFbmRQb2ludFJlZiBFbmRQb2ludElkPSJMUjNFcCI+PC9FbmRQb2ludFJlZj4KICAgICAgICAJPC9CcmFuY2g+CiAgICAgICAgCQogICAgICAgIAk8QnJhbmNoPgogICAgICAgIAkJPExhYmVsPkh5cG8vSXNvLWVuaGFuY2luZyAtIE9uZTwvTGFiZWw+IAogICAgICAgIAkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iT2JzZXJ2YXRpb25DaGFyYWN0ZXIiIENvbXBhcmlzb25WYWx1ZT0ibm90RGVmUHJvYkJlbmlnbiIvPgogICAgICAgIAkJCTxMZXNzVGhhbkNvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJkaWFtZXRlciIgQ29tcGFyaXNvblZhbHVlPSJEaWFtZXRlckxhcmdlIi8+CiAgICAgICAgCQkJPE9yQ29uZGl0aW9uPgogICAgICAgIAkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iQXJ0ZXJpYWxFbmhhbmNlbWVudCIgQ29tcGFyaXNvblZhbHVlPSJoeXBvRW5oYW5jaW5nIi8+CiAgICAgICAgCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJBcnRlcmlhbEVuaGFuY2VtZW50IiBDb21wYXJpc29uVmFsdWU9Imlzb0VuaGFuY2luZyIvPgogICAgICAgIAkJCTwvT3JDb25kaXRpb24+ICAgICAgICAJCQkKICAgICAgICAJCQk8T3JDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4gIDwhLS0gV2FzaG91dCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ibm8iLz4gIDwhLS0gQ2Fwc3VsZSA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJ' +
                'pc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9Im5vIi8+ICA8IS0tIFRocmVzaG9sZGdyb3d0aCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQk8L09yQ29uZGl0aW9uPgogICAgICAgIAkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQk8RW5kUG9pbnRSZWYgRW5kUG9pbnRJZD0iTFIzRXAiPjwvRW5kUG9pbnRSZWY+CiAgICAgICAgCTwvQnJhbmNoPgogICAgICAgIAkKICAgICAgICAJPEJyYW5jaD4KICAgICAgICAJCTxMYWJlbD5IeXBvL0lzby1lbmhhbmNpbmcgLSBUd28gb3IgTW9yZTwvTGFiZWw+CiAgICAgICAgCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIgQ29tcGFyaXNvblZhbHVlPSJub3REZWZQcm9iQmVuaWduIi8+CiAgICAgICAgCQkJPExlc3NUaGFuQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImRpYW1ldGVyIiBDb21wYXJpc29uVmFsdWU9IkRpYW1ldGVyTGFyZ2UiLz4KICAgICAgICAJCQk8T3JDb25kaXRpb24+CiAgICAgICAgCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJBcnRlcmlhbEVuaGFuY2VtZW50IiBDb21wYXJpc29uVmFsdWU9Imh5cG9FbmhhbmNpbmciLz4KICAgICAgICAJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9IkFydGVyaWFsRW5oYW5jZW1lbnQiIENvbXBhcmlzb25WYWx1ZT0iaXNvRW5oYW5jaW5nIi8+CiAgICAgICAgCQkJPC9PckNvbmRpdGlvbj4gIAogICAgICAgIAkJCTxPckNvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9InllcyIvPiAgPCEtLSBXYXNob3V0ID0gWWVzLCBDYXBzdWxlID0gWWVzIC0tPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImNhcHN1bGUiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+ICA8IS0tIFdhc2hvdXQgPSBZZXMsIFRocmVzaG9sZGdyb3d0aCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9Im5vIi8+ICA8IS0tIENhcHN1bGUgPSBZZXMsIFRocmVzaG9sZGdyb3d0aCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4gIDwhLS0gV2FzaG91dCA9IFllcywgQ2Fwc3VsZSA9IFllcywgVGhyZXNob2xkZ3Jvd3RoID0gWWVzIC0tPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImNhcHN1bGUiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQk8L09yQ29uZGl0aW9uPgogICAgICAgIAkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQk8RW5kUG9pbnRSZWYgRW5kUG9pbnRJZD0iTFI0RXAiPjwvRW5kUG9pbnRSZWY+CiAgICAgICAgCTwvQnJhbmNoPgogICAgICAgIAkKICAgICAgICAJPEJyYW5jaD4KICAgICAgICAJCTxMYWJlbD5IeXBvL0lzby1lbmhhbmNpbmcgLSAmZ3Q7PSAyMDwvTGFiZWw+CiAgICAgICAgCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIgQ29tcGFyaXNvblZhbHVlPSJub3REZWZQcm9iQmVuaWduIi8+CiAgICAgICAgCQkJPEdyZWF0ZXJUaGFuT3JFcXVhbHNDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iZGlhbWV0ZXIiIENvbXBhcmlzb25WYWx1ZT0iRGlhbWV0ZXJMYXJnZSIvPgogICAgICAgIAkJCTxPckNvbmRpdGlvbj4KICAgICAgICAJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9IkFydGVyaWFsRW5oYW5jZW1lbnQiIENvbXBhcmlzb25WYWx1ZT0iaHlwb0VuaGFuY2luZyIvPgogICAgICAgIAkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iQXJ0ZXJpYWxFbmhhbmNlbWVudCIgQ29tcGFyaXNvblZhbHVlPSJpc29FbmhhbmNpbmciLz4KICAgICAgICAJCQk8L09yQ29uZGl0aW9uPgogICAgICAgIAkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ0aHJlc2hvbGRncm93dGgiIENvbXBhcmlzb25WYWx1ZT0ibm8iLz4KICAgICAgICAJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJPEVuZFBvaW50UmVmIEVuZFBvaW50SWQ9IkxSM0VwIj48L0VuZFBvaW50UmVmPgogICAgICAgIAk8L0JyYW5jaD4KICAgICAgICAJCiAgICAgICAgCTxCcmFuY2g+CiAgICAgICAgCQk8TGFiZWw+SHlwby9Jc28tZW5oYW5jaW5nIC0gT25lPC9MYWJlbD4KICAgICAgICAJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Ik9ic2VydmF0aW9uQ2hhcmFjdGVyIiBDb21wYXJpc29uVmFsdWU9Im5vdERlZlByb2JCZW5pZ24iLz4KICAgICAgICAJCQk8R3JlYXRlclRoYW5PckVxdWFsc0NvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJkaWFtZXRlciIgQ29tcGFyaXNvblZhbHVlPSJEaWFtZXRlckxhcmdlIi8+CiAgICAgICAgCQkJPE9yQ29uZGl0aW9uPgogICAgICAgIAkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iQXJ0ZXJpYWxFbmhhbmNlbWVudCIgQ29tcGFyaXNvblZhbHVlPSJoeXBvRW5oYW5jaW5nIi8+CiAgICAgICAgCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJBcnRlcmlhbEVuaGFuY2VtZW50IiBDb21wYXJpc29uVmFsdWU9Imlzb0VuaGFuY2luZyIvPgogICAgICAgIAkJCTwvT3JDb25kaXRpb24+CiAgICAgICAgCQkJPE9yQ29uZGl0aW9uPgogICAgICAgIAkJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+ICA8IS0tIFdhc2hvdXQgPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9Im5vIi8+ICA8IS0tIENhcHN1bGUgPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ0aHJlc2hvbGRncm93dGgiIENvbXBhcmlzb25WYWx1ZT0ibm8iLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJubyIvPiAgPCEtLSBUaHJlc2hvbGRncm93dGggPSBZZXMgLS0+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iY2Fwc3VsZSIgQ29tcGFyaXNvblZhbHVlPSJubyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJPC9PckNvbmRpdGlvbj4gICAgICAgIAkJCQogICAgICAgIAkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQk8RW5kUG9pbnRSZWYgRW5kUG9pbnRJZD0iTFI0RXAiPjwvRW5kUG9pbnRSZWY+CiAgICAgICAgCTwvQnJhbmNoPgogICAgICAgIAkKICAgICAgICAJPEJyYW5jaD4KICAgICAgICAJCTxMYWJlbD5IeXBvL0lzby1lbmhhbmNpbmcgLSBUd28gb3IgTW9yZTwvTGFiZWw+CiAgICAgICAgCQk8QW5kQ29uZGl0aW9uPgog' +
                'ICAgICAgIAkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJPYnNlcnZhdGlvbkNoYXJhY3RlciIgQ29tcGFyaXNvblZhbHVlPSJub3REZWZQcm9iQmVuaWduIi8+CiAgICAgICAgCQkJPEdyZWF0ZXJUaGFuT3JFcXVhbHNDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iZGlhbWV0ZXIiIENvbXBhcmlzb25WYWx1ZT0iRGlhbWV0ZXJMYXJnZSIvPgogICAgICAgIAkJCTxPckNvbmRpdGlvbj4KICAgICAgICAJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9IkFydGVyaWFsRW5oYW5jZW1lbnQiIENvbXBhcmlzb25WYWx1ZT0iaHlwb0VuaGFuY2luZyIvPgogICAgICAgIAkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0iQXJ0ZXJpYWxFbmhhbmNlbWVudCIgQ29tcGFyaXNvblZhbHVlPSJpc29FbmhhbmNpbmciLz4KICAgICAgICAJCQk8L09yQ29uZGl0aW9uPgogICAgICAgIAkJCTxPckNvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9InllcyIvPiAgPCEtLSBXYXNob3V0ID0gWWVzLCBDYXBzdWxlID0gWWVzIC0tPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImNhcHN1bGUiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCTwvQW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQk8QW5kQ29uZGl0aW9uPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9Indhc2hvdXQiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+ICA8IS0tIFdhc2hvdXQgPSBZZXMsIFRocmVzaG9sZGdyb3d0aCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9Im5vIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQkJPEFuZENvbmRpdGlvbj4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJ3YXNob3V0IiBDb21wYXJpc29uVmFsdWU9Im5vIi8+ICA8IS0tIENhcHN1bGUgPSBZZXMsIFRocmVzaG9sZGdyb3d0aCA9IFllcyAtLT4KICAgICAgICAJCQkJCTxFcXVhbENvbmRpdGlvbiBEYXRhRWxlbWVudElkPSJjYXBzdWxlIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9InRocmVzaG9sZGdyb3d0aCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4KICAgICAgICAJCQkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQkJCTxBbmRDb25kaXRpb24+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0id2FzaG91dCIgQ29tcGFyaXNvblZhbHVlPSJ5ZXMiLz4gIDwhLS0gV2FzaG91dCA9IFllcywgQ2Fwc3VsZSA9IFllcywgVGhyZXNob2xkZ3Jvd3RoID0gWWVzIC0tPgogICAgICAgIAkJCQkJPEVxdWFsQ29uZGl0aW9uIERhdGFFbGVtZW50SWQ9ImNhcHN1bGUiIENvbXBhcmlzb25WYWx1ZT0ieWVzIi8+CiAgICAgICAgCQkJCQk8RXF1YWxDb25kaXRpb24gRGF0YUVsZW1lbnRJZD0idGhyZXNob2xkZ3Jvd3RoIiBDb21wYXJpc29uVmFsdWU9InllcyIvPgogICAgICAgIAkJCQk8L0FuZENvbmRpdGlvbj4KICAgICAgICAJCQk8L09yQ29uZGl0aW9uPgogICAgICAgIAkJPC9BbmRDb25kaXRpb24+CiAgICAgICAgCQk8RW5kUG9pbnRSZWYgRW5kUG9pbnRJZD0iTFI0RXAiPjwvRW5kUG9pbnRSZWY+CiAgICAgICAgCTwvQnJhbmNoPiAgICAgICAJCiAgICAgICAgCQogICAgICAgIDwvRGVjaXNpb25Qb2ludD4KICAgIDwvUnVsZXM+CiAgICAKICAgIDxFbmRQb2ludHM+ICAgCQogICAgCTxFbmRQb2ludCBJZD0iTFIxRXAiPgogICAgICAgICAgICA8TGFiZWw+TFItMTwvTGFiZWw+CiAgICAJCTxSZXBvcnRTZWN0aW9ucz4gICAgICAKICAgIAkJCTxSZXBvcnRTZWN0aW9uIFNlY3Rpb25JZD0iZmluZGluZ3MiPgogICAgCQkJCTxCcmFuY2g+CiAgICAJCQkJCTxSZXBvcnRUZXh0IFR5cGU9IlBsYWluVGV4dCI+W0xSLTFdIEltYWdpbmcgZmVhdHVyZXMgZGlhZ25vc3RpYyBvZiBhIGJlbmlnbiBlbnRpdHkgb3IgZGVmaW5pdGUgc3BvbnRhbmVvdXMgZGlzYXBwZWFyYW5jZSBhdCBmb2xsb3cgdXAuPC9SZXBvcnRUZXh0PgogICAgCQkJCTwvQnJhbmNoPgogICAgCQkJPC9SZXBvcnRTZWN0aW9uPgogICAgCQk8L1JlcG9ydFNlY3Rpb25zPgogICAgICAgIDwvRW5kUG9pbnQ+CgkKICAgIAk8RW5kUG9pbnQgSWQ9IkxSMkVwIj4KICAgICAgICAgICAgPExhYmVsPkxSLTI8L0xhYmVsPiAgICAJCQog' +
                'ICAgCQk8UmVwb3J0U2VjdGlvbnM+ICAgICAgCiAgICAJCQk8UmVwb3J0U2VjdGlvbiBTZWN0aW9uSWQ9ImZpbmRpbmdzIj4KICAgIAkJCQk8QnJhbmNoPgoJICAgIAkJCQkJPFJlcG9ydFRleHQgVHlwZT0iUGxhaW5UZXh0Ij5bTFItMl0gT2JzZXJ2YXRpb24gd2l0aCBpbWFnaW5nIGZlYXR1cmVzIHN1Z2dlc3RpdmUgYnV0IG5vdCBkaWFnbm9zdGljIG9mIGEgYmVuaWduIGVudGl0eS48L1JlcG9ydFRleHQ+CiAgICAJCQkJPC9CcmFuY2g+CiAgICAJCQk8L1JlcG9ydFNlY3Rpb24+CiAgICAJCTwvUmVwb3J0U2VjdGlvbnM+CiAgICAgICAgPC9FbmRQb2ludD4KIAogICAgCTxFbmRQb2ludCBJZD0iTFIzRXAiPgogICAgICAgICAgICA8TGFiZWw+TFItMzwvTGFiZWw+CQogICAgCQk8UmVwb3J0U2VjdGlvbnM+ICAgICAgCiAgICAJCQk8UmVwb3J0U2VjdGlvbiBTZWN0aW9uSWQ9ImZpbmRpbmdzIj4KICAgIAkJCQk8QnJhbmNoPgogICAgCQkJCQk8UmVwb3J0VGV4dCBUeXBlPSJQbGFpblRleHQiPltMUi0zXSBPYnNlcnZhdGlvbiB0aGF0IGRvZXMgbm90IG1lZXQgdW5lcXVpdm9jYWwgY3JpdGVyaWEgZm9yIG90aGVyIExJLVJBRFMgY2F0ZWdvcmllcy48L1JlcG9ydFRleHQ+CiAgICAJCQkJPC9CcmFuY2g+CiAgICAJCQk8L1JlcG9ydFNlY3Rpb24+CiAgICAJCTwvUmVwb3J0U2VjdGlvbnM+CiAgICAgICAgPC9FbmRQb2ludD4KIAoJCTxFbmRQb2ludCBJZD0iTFI0RXAiPgogICAgICAgICAgICA8TGFiZWw+TFItNDwvTGFiZWw+CgkJCTxSZXBvcnRTZWN0aW9ucz4gICAgICAKCQkJCTxSZXBvcnRTZWN0aW9uIFNlY3Rpb25JZD0iZmluZGluZ3MiPgoJCQkJCTxCcmFuY2g+CgkJCQkJCTxSZXBvcnRUZXh0IFR5cGU9IlBsYWluVGV4dCI+W0xSLTRdIE9ic2VydmF0aW9uIHdpdGggaW1hZ2luZyBmZWF0dXJlcyBzdWdnZXN0aXZlIGJ1dCBub3QgZGlhZ25vc3RpYyBvZiBMUi48L1JlcG9ydFRleHQ+CgkJCQkJPC9CcmFuY2g+CgkJCQk8L1JlcG9ydFNlY3Rpb24+CgkJCTwvUmVwb3J0U2VjdGlvbnM+CiAgICAgICAgPC9FbmRQb2ludD4KICAgICAgICAKICAgICAgICA8RW5kUG9pbnQgSWQ9IkxSNUVwIj4KICAgICAgICAgICAgPExhYmVsPkxSLTU8L0xhYmVsPgogICAgICAgIAk8UmVwb3J0U2VjdGlvbnM+ICAgICAgCiAgICAgICAgCQk8UmVwb3J0U2VjdGlvbiBTZWN0aW9uSWQ9ImZpbmRpbmdzIj4KICAgICAgICAJCQk8QnJhbmNoPgogICAgICAgIAkJCQk8UmVwb3J0VGV4dCBUeXBlPSJQbGFpblRleHQiPltMUi01XSBPYnNlcnZhdGlvbiB3aXRoIGltYWdpbmcgZmVhdHVyZXMgZGlhZ25vc3RpYyBvZiBMUi48L1JlcG9ydFRleHQ+CiAgICAgICAgCQkJPC9CcmFuY2g+CiAgICAgICAgCQk8L1JlcG9ydFNlY3Rpb24+CiAgICAgICAgCTwvUmVwb3J0U2VjdGlvbnM+ICAgICAgICAgICAgCiAgICAgICAgPC9FbmRQb2ludD4gICAgICAgIAogICAgICAgIAogICAgCTxFbmRQb2ludCBJZD0iTFI1dkVwIj4KICAgICAgICAgICAgPExhYmVsPkxSLTVWPC9MYWJlbD4KICAgIAkJPFJlcG9ydFNlY3Rpb25zPiAgICAgIAogICAgCQkJPFJlcG9ydFNlY3Rpb24gU2VjdGlvbklkPSJmaW5kaW5ncyI+CiAgICAJCQkJPEJyYW5jaD4KICAgIAkJCQkJPFJlcG9ydFRleHQgVHlwZT0iUGxhaW5UZXh0Ij5bTFItNVZdIFByZXNlbmNlIG9mIHR1bW9yIGluIHZlaW4uPC9SZXBvcnRUZXh0PgogICAgCQkJCTwvQnJhbmNoPgogICAgCQkJPC9SZXBvcnRTZWN0aW9uPgogICAgCQk8L1JlcG9ydFNlY3Rpb25zPiAKICAgICAgICA8L0VuZFBvaW50PgoJCQoJCTxFbmRQb2ludCBJZD0iTFJtRXAiPgogICAgICAgICAgICA8TGFiZWw+TFItTTwvTGFiZWw+CgkJCTxSZXBvcnRTZWN0aW9ucz4gICAgICAKCQkJCTxSZXBvcnRTZWN0aW9uIFNlY3Rpb25JZD0iZmluZGluZ3MiPgoJCQkJCTxCcmFuY2g+CgkJCQkJCTxSZXBvcnRUZXh0IFR5cGU9IlBsYWluVGV4dCI+W0xSLU1dIE9ic2VydmF0aW9uIHdpdGggb25lIG9yIG1vcmUgaW1hZ2luZyBmZWF0dXJlcyB0aGF0IGZhdm9yIG5vbi1MUiBtYWxpZ25hbmN5PC9SZXBvcnRUZXh0PgoJCQkJCTwvQnJhbmNoPgoJCQkJPC9SZXBvcnRTZWN0aW9uPgoJCQk8L1JlcG9ydFNlY3Rpb25zPiAKICAgICAgICA8L0VuZFBvaW50PgoJCQogICAgICAgIDxFbmRQb2ludCBJZD0iTFJ0cmVhdGVkRXAiPgogICAgICAgICAgICA8TGFiZWw+TFItVHJlYXRlZDwvTGFiZWw+CiAgICAgICAgCTxSZXBvcnRTZWN0aW9ucz4gICAgICAKICAgICAgICAJCTxSZXBvcnRTZWN0aW9uIFNlY3Rpb25JZD0iZmluZGluZ3MiPgogICAgICAgIAkJCTxCcmFuY2g+CiAgICAgICAgCQkJCTxSZXBvcnRUZXh0IFR5cGU9IlBsYWluVGV4dCI+W0xSLVRyZWF0ZWRdIEFuIG9ic2VydmF0aW9uIHRoYXQgaGFzIHVuZGVyZ29uZSBsb2NvLXJlZ2lvbmFsIHRyZWF0bWVudC48L1JlcG9ydFRleHQ+CiAgICAgICAgCQkJPC9CcmFuY2g+CiAgICAgICAgCQk8L1JlcG9ydFNlY3Rpb24+CiAgICAgICAgCTwvUmVwb3J0U2VjdGlvbnM+IAkKICAgICAgICA8L0VuZFBvaW50PgogICAgICAgCiAgICAgICAgPEVuZFBvaW50IElkPSJMUjRfNSI+CiAgICAgICAgICAgIDxMYWJlbD5MUi00L0xSLTU8L0xhYmVsPgogICAgICAgIAk8UmVwb3J0U2VjdGlvbnM+ICAgICAgCiAgICAgICAgCQk8UmVwb3J0U2VjdGlvbiBTZWN0aW9uSWQ9ImZpbmRpbmdzIj4KICAgICAgICAJCQk8QnJhbmNoPgogICAgICAgIAkJCQk8UmVwb3J0VGV4dCBUeXBlPSJQbGFpblRleHQiPltMUi00L0xSLTVdIFJlZmVycyB0byBhIGNlbGwgaW4gdGhlIExJLVJBRFMgdGFibGUgd2hlcmUgb2JzZXJ2YXRpb25zIG1heSBiZSBjb25zaWRlcmVkIExSLTQsIExSLTV1cywgb3IgTFItNWc8L1JlcG9ydFRleHQ+CiAgICAgICAgCQkJPC9CcmFuY2g+CiAgICAgICAgCQk8L1JlcG9ydFNlY3Rpb24+CiAgICAgICAgCTwvUmVwb3J0U2VjdGlvbnM+CiAgICAgICAgPC9FbmRQb2ludD4gICAgICAgICAgIAogICAgPC9FbmRQb2ludHM+CiAgICAKPC9SZXBvcnRpbmdNb2R1bGU+';
        const XMLContent = 
        decode(base64String);
        console.log(XMLContent);
        const template = this.templateManagerService.getTemplate(XMLContent);
        console.log(template);
        this.simulatorEngineService.addOrUpdateDataElement('ObservationCharacter','tumorInVein', '');
    }
}
